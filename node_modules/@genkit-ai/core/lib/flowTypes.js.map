{"version":3,"sources":["../src/flowTypes.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from 'zod';\n\n// NOTE: Keep this file in sync with genkit-tools/src/types/flow.ts!\n// Eventually tools will be source of truth for these types (by generating a\n// JSON schema) but until then this file must be manually kept in sync\n\nexport interface FlowStateQuery {\n  limit?: number;\n  continuationToken?: string;\n}\nexport interface FlowStateQueryResponse {\n  flowStates: FlowState[];\n  continuationToken?: string;\n}\n\n/**\n * Flow state store persistence interface.\n */\nexport interface FlowStateStore {\n  save(id: string, state: FlowState): Promise<void>;\n  load(id: string): Promise<FlowState | undefined>;\n  list(query?: FlowStateQuery): Promise<FlowStateQueryResponse>;\n}\n\nexport const FlowStateExecutionSchema = z.object({\n  startTime: z\n    .number()\n    .optional()\n    .describe('start time in milliseconds since the epoch'),\n  endTime: z\n    .number()\n    .optional()\n    .describe('end time in milliseconds since the epoch'),\n  traceIds: z.array(z.string()),\n});\n\nexport type FlowStateExecution = z.infer<typeof FlowStateExecutionSchema>;\n\nexport const FlowResponseSchema = z.object({\n  response: z.unknown().nullable(),\n});\n\nexport const FlowErrorSchema = z.object({\n  error: z.string().optional(),\n  stacktrace: z.string().optional(),\n});\n\nexport type FlowError = z.infer<typeof FlowErrorSchema>;\n\nexport const FlowResultSchema = FlowResponseSchema.and(FlowErrorSchema);\n\n/**\n * Flow Operation, modelled after:\n * https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.longrunning#google.longrunning.Operation\n */\nexport const OperationSchema = z.object({\n  name: z\n    .string()\n    .describe(\n      'server-assigned name, which is only unique within the same service that originally ' +\n        'returns it.'\n    ),\n  metadata: z\n    .any()\n    .optional()\n    .describe(\n      'Service-specific metadata associated with the operation. It typically contains progress ' +\n        'information and common metadata such as create time.'\n    ),\n  done: z\n    .boolean()\n    .optional()\n    .default(false)\n    .describe(\n      'If the value is false, it means the operation is still in progress. If true, the ' +\n        'operation is completed, and either error or response is available.'\n    ),\n  result: FlowResultSchema.optional(),\n  blockedOnStep: z\n    .object({\n      name: z.string(),\n      schema: z.string().optional(),\n    })\n    .optional(),\n});\n\nexport type Operation = z.infer<typeof OperationSchema>;\n\n/**\n * Defines the format for flow state. This is the format used for persisting the state in\n * the {@link FlowStateStore}.\n */\nexport const FlowStateSchema = z.object({\n  name: z.string().optional(),\n  flowId: z.string(),\n  input: z.unknown(),\n  startTime: z.number().describe('start time in milliseconds since the epoch'),\n  cache: z.record(\n    z.string(),\n    z.object({\n      value: z.any().optional(),\n      empty: z.literal(true).optional(),\n    })\n  ),\n  eventsTriggered: z.record(z.string(), z.any()),\n  blockedOnStep: z\n    .object({\n      name: z.string(),\n      schema: z.string().optional(),\n    })\n    .nullable(),\n  operation: OperationSchema,\n  traceContext: z.string().optional(),\n  executions: z.array(FlowStateExecutionSchema),\n});\n\nexport type FlowState = z.infer<typeof FlowStateSchema>;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,iBAAkB;AAwBX,MAAM,2BAA2B,aAAE,OAAO;AAAA,EAC/C,WAAW,aACR,OAAO,EACP,SAAS,EACT,SAAS,4CAA4C;AAAA,EACxD,SAAS,aACN,OAAO,EACP,SAAS,EACT,SAAS,0CAA0C;AAAA,EACtD,UAAU,aAAE,MAAM,aAAE,OAAO,CAAC;AAC9B,CAAC;AAIM,MAAM,qBAAqB,aAAE,OAAO;AAAA,EACzC,UAAU,aAAE,QAAQ,EAAE,SAAS;AACjC,CAAC;AAEM,MAAM,kBAAkB,aAAE,OAAO;AAAA,EACtC,OAAO,aAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,YAAY,aAAE,OAAO,EAAE,SAAS;AAClC,CAAC;AAIM,MAAM,mBAAmB,mBAAmB,IAAI,eAAe;AAM/D,MAAM,kBAAkB,aAAE,OAAO;AAAA,EACtC,MAAM,aACH,OAAO,EACP;AAAA,IACC;AAAA,EAEF;AAAA,EACF,UAAU,aACP,IAAI,EACJ,SAAS,EACT;AAAA,IACC;AAAA,EAEF;AAAA,EACF,MAAM,aACH,QAAQ,EACR,SAAS,EACT,QAAQ,KAAK,EACb;AAAA,IACC;AAAA,EAEF;AAAA,EACF,QAAQ,iBAAiB,SAAS;AAAA,EAClC,eAAe,aACZ,OAAO;AAAA,IACN,MAAM,aAAE,OAAO;AAAA,IACf,QAAQ,aAAE,OAAO,EAAE,SAAS;AAAA,EAC9B,CAAC,EACA,SAAS;AACd,CAAC;AAQM,MAAM,kBAAkB,aAAE,OAAO;AAAA,EACtC,MAAM,aAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,QAAQ,aAAE,OAAO;AAAA,EACjB,OAAO,aAAE,QAAQ;AAAA,EACjB,WAAW,aAAE,OAAO,EAAE,SAAS,4CAA4C;AAAA,EAC3E,OAAO,aAAE;AAAA,IACP,aAAE,OAAO;AAAA,IACT,aAAE,OAAO;AAAA,MACP,OAAO,aAAE,IAAI,EAAE,SAAS;AAAA,MACxB,OAAO,aAAE,QAAQ,IAAI,EAAE,SAAS;AAAA,IAClC,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,aAAE,OAAO,aAAE,OAAO,GAAG,aAAE,IAAI,CAAC;AAAA,EAC7C,eAAe,aACZ,OAAO;AAAA,IACN,MAAM,aAAE,OAAO;AAAA,IACf,QAAQ,aAAE,OAAO,EAAE,SAAS;AAAA,EAC9B,CAAC,EACA,SAAS;AAAA,EACZ,WAAW;AAAA,EACX,cAAc,aAAE,OAAO,EAAE,SAAS;AAAA,EAClC,YAAY,aAAE,MAAM,wBAAwB;AAC9C,CAAC;","names":[]}