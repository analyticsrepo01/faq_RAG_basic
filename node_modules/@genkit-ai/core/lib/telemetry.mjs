import "./chunk-XEFTB2OF.mjs";
import { ValueType } from "@opentelemetry/api";
import { GENKIT_VERSION } from "./index.js";
import {
  internalMetricNamespaceWrap,
  MetricCounter,
  MetricHistogram
} from "./metrics.js";
const _N = internalMetricNamespaceWrap.bind(null, "action");
const actionCounter = new MetricCounter(_N("requests"), {
  description: "Counts calls to genkit actions.",
  valueType: ValueType.INT
});
const actionLatencies = new MetricHistogram(_N("latency"), {
  description: "Latencies when calling Genkit actions.",
  valueType: ValueType.DOUBLE,
  unit: "ms"
});
function writeActionSuccess(actionName, latencyMs) {
  const dimensions = {
    name: actionName,
    source: "ts",
    sourceVersion: GENKIT_VERSION
  };
  actionCounter.add(1, dimensions);
  actionLatencies.record(latencyMs, dimensions);
}
function writeActionFailure(actionName, latencyMs, err) {
  const dimensions = {
    name: actionName,
    errorCode: err == null ? void 0 : err.code,
    errorMessage: err == null ? void 0 : err.message,
    source: "ts",
    sourceVersion: GENKIT_VERSION
  };
  actionCounter.add(1, dimensions);
  actionLatencies.record(latencyMs, dimensions);
}
export {
  writeActionFailure,
  writeActionSuccess
};
//# sourceMappingURL=telemetry.mjs.map