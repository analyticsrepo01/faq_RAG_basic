{"version":3,"sources":["../src/experimental.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OperationSchema } from '@genkit-ai/core';\nimport {\n  Flow,\n  FlowInvokeEnvelopeMessage,\n  StepsFunction,\n} from '@genkit-ai/flow';\nimport { durableFlow } from '@genkit-ai/flow/experimental';\nimport { getFunctions } from 'firebase-admin/functions';\nimport { logger } from 'firebase-functions/v2';\nimport { HttpsFunction } from 'firebase-functions/v2/https';\nimport {\n  TaskQueueFunction,\n  TaskQueueOptions,\n  onTaskDispatched,\n} from 'firebase-functions/v2/tasks';\nimport * as z from 'zod';\nimport { FunctionFlow } from './functions.js';\nimport { callHttpsFunction, getFunctionUrl, getLocation } from './helpers.js';\n\ninterface ScheduledFlowConfig<\n  I extends z.ZodTypeAny = z.ZodTypeAny,\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  S extends z.ZodTypeAny = z.ZodTypeAny,\n> {\n  name: string;\n  inputSchema?: I;\n  outputSchema?: O;\n  streamSchema?: S;\n  taskQueueOptions?: TaskQueueOptions;\n}\n\n/**\n * Creates a scheduled flow backed by Cloud Functions for Firebase gen2 Cloud Task triggered function.\n * This feature is EXPERIMENTAL -- APIs will change or may get removed completely.\n * For testing and feedback only.\n */\nexport function onScheduledFlow<\n  I extends z.ZodTypeAny = z.ZodTypeAny,\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  S extends z.ZodTypeAny = z.ZodTypeAny,\n>(\n  config: ScheduledFlowConfig<I, O, S>,\n  steps: StepsFunction<I, O, S>\n): FunctionFlow<I, O, S> {\n  const f = durableFlow(\n    {\n      ...config,\n      invoker: async (flow, data, streamingCallback) => {\n        const responseJson = await callHttpsFunction(\n          flow.name,\n          await getLocation(),\n          data,\n          streamingCallback\n        );\n        return OperationSchema.parse(JSON.parse(responseJson));\n      },\n      scheduler: async (flow, msg, delaySeconds) => {\n        await enqueueCloudTask(flow.name, msg, delaySeconds);\n      },\n    },\n    steps\n  );\n\n  const wrapped = wrapScheduledFlow(f, config);\n\n  const funcFlow = wrapped as FunctionFlow<I, O, S>;\n  funcFlow.flow = f;\n\n  return funcFlow;\n}\n\nfunction wrapScheduledFlow<\n  I extends z.ZodTypeAny = z.ZodTypeAny,\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  S extends z.ZodTypeAny = z.ZodTypeAny,\n>(flow: Flow<I, O, S>, config: ScheduledFlowConfig<I, O, S>): HttpsFunction {\n  const tq = onTaskDispatched<FlowInvokeEnvelopeMessage>(\n    {\n      ...config.taskQueueOptions,\n      memory: config.taskQueueOptions?.memory || '512MiB',\n      retryConfig: config.taskQueueOptions?.retryConfig || {\n        maxAttempts: 2,\n        minBackoffSeconds: 10,\n      },\n    },\n    () => {} // never called, everything handled in createControlAPI.\n  );\n  return createControlAPI(flow, tq);\n}\n\nfunction createControlAPI(\n  flow: Flow<any, any, any>,\n  tq: TaskQueueFunction<FlowInvokeEnvelopeMessage>\n) {\n  const interceptor = flow.expressHandler as any;\n  interceptor.__endpoint = tq.__endpoint;\n  if (tq.hasOwnProperty('__requiredAPIs')) {\n    interceptor.__requiredAPIs = tq['__requiredAPIs'];\n  }\n  return interceptor;\n}\n\n/**\n * Sends the flow invocation envelope to the flow via a task queue.\n */\nasync function enqueueCloudTask(\n  flowName: string,\n  payload: FlowInvokeEnvelopeMessage,\n  scheduleDelaySeconds?\n) {\n  const queue = getFunctions().taskQueue(flowName);\n  // TODO: set the right location\n  const targetUri = await getFunctionUrl(flowName, 'us-central1');\n  logger.debug(\n    `dispatchCloudTask targetUri for flow ${flowName} with delay ${scheduleDelaySeconds}`\n  );\n  await queue.enqueue(payload, {\n    scheduleDelaySeconds,\n    dispatchDeadlineSeconds: scheduleDelaySeconds,\n    uri: targetUri,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAgC;AAMhC,0BAA4B;AAC5B,uBAA6B;AAC7B,gBAAuB;AAEvB,mBAIO;AAGP,qBAA+D;AAmBxD,SAAS,gBAKd,QACA,OACuB;AACvB,QAAM,QAAI;AAAA,IACR,iCACK,SADL;AAAA,MAEE,SAAS,CAAO,MAAM,MAAM,sBAAsB;AAChD,cAAM,eAAe,UAAM;AAAA,UACzB,KAAK;AAAA,UACL,UAAM,4BAAY;AAAA,UAClB;AAAA,UACA;AAAA,QACF;AACA,eAAO,4BAAgB,MAAM,KAAK,MAAM,YAAY,CAAC;AAAA,MACvD;AAAA,MACA,WAAW,CAAO,MAAM,KAAK,iBAAiB;AAC5C,cAAM,iBAAiB,KAAK,MAAM,KAAK,YAAY;AAAA,MACrD;AAAA,IACF;AAAA,IACA;AAAA,EACF;AAEA,QAAM,UAAU,kBAAkB,GAAG,MAAM;AAE3C,QAAM,WAAW;AACjB,WAAS,OAAO;AAEhB,SAAO;AACT;AAEA,SAAS,kBAIP,MAAqB,QAAqD;AA3F5E;AA4FE,QAAM,SAAK;AAAA,IACT,iCACK,OAAO,mBADZ;AAAA,MAEE,UAAQ,YAAO,qBAAP,mBAAyB,WAAU;AAAA,MAC3C,eAAa,YAAO,qBAAP,mBAAyB,gBAAe;AAAA,QACnD,aAAa;AAAA,QACb,mBAAmB;AAAA,MACrB;AAAA,IACF;AAAA,IACA,MAAM;AAAA,IAAC;AAAA;AAAA,EACT;AACA,SAAO,iBAAiB,MAAM,EAAE;AAClC;AAEA,SAAS,iBACP,MACA,IACA;AACA,QAAM,cAAc,KAAK;AACzB,cAAY,aAAa,GAAG;AAC5B,MAAI,GAAG,eAAe,gBAAgB,GAAG;AACvC,gBAAY,iBAAiB,GAAG,gBAAgB;AAAA,EAClD;AACA,SAAO;AACT;AAKA,SAAe,iBACb,UACA,SACA,sBACA;AAAA;AACA,UAAM,YAAQ,+BAAa,EAAE,UAAU,QAAQ;AAE/C,UAAM,YAAY,UAAM,+BAAe,UAAU,aAAa;AAC9D,qBAAO;AAAA,MACL,wCAAwC,QAAQ,eAAe,oBAAoB;AAAA,IACrF;AACA,UAAM,MAAM,QAAQ,SAAS;AAAA,MAC3B;AAAA,MACA,yBAAyB;AAAA,MACzB,KAAK;AAAA,MACL,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;","names":[]}