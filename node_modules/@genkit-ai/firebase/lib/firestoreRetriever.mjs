import {
  __async
} from "./chunk-DJRN6NKF.mjs";
import { embed } from "@genkit-ai/ai/embedder";
import {
  defineRetriever
} from "@genkit-ai/ai/retriever";
import z from "zod";
function toContent(d, contentField) {
  if (typeof contentField === "function") {
    return contentField(d);
  }
  return [{ text: d.get(contentField) }];
}
function toDocuments(result, vectorField, contentField, metadataFields) {
  return result.docs.map((d) => {
    const out = { content: toContent(d, contentField) };
    if (typeof metadataFields === "function") {
      out.metadata = metadataFields(d);
      return out;
    }
    out.metadata = { id: d.id };
    if (metadataFields) {
      for (const field of metadataFields) {
        out.metadata[field] = d.get(field);
      }
      return out;
    }
    out.metadata = d.data();
    delete out.metadata[vectorField];
    if (typeof contentField === "string")
      delete out.metadata[contentField];
    return out;
  });
}
function defineFirestoreRetriever(config) {
  const {
    name,
    label,
    firestore,
    embedder,
    collection,
    vectorField,
    metadataFields,
    contentField,
    distanceMeasure
  } = config;
  return defineRetriever(
    {
      name,
      info: {
        label: label || `Firestore - ${name}`
      },
      configSchema: z.object({
        where: z.record(z.any()).optional(),
        limit: z.number()
      })
    },
    (input, options) => __async(this, null, function* () {
      const embedding = yield embed({ embedder, content: input });
      let query = firestore.collection(collection);
      for (const field in options.where || {}) {
        query = query.where(field, "==", options.where[field]);
      }
      const result = yield query.findNearest(vectorField, embedding, {
        limit: options.limit || 10,
        distanceMeasure: distanceMeasure || "COSINE"
      }).get();
      return {
        documents: toDocuments(
          result,
          vectorField,
          contentField,
          metadataFields
        )
      };
    })
  );
}
export {
  defineFirestoreRetriever
};
//# sourceMappingURL=firestoreRetriever.mjs.map