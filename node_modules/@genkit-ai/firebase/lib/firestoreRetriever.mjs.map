{"version":3,"sources":["../src/firestoreRetriever.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { embed, EmbedderArgument } from '@genkit-ai/ai/embedder';\nimport {\n  defineRetriever,\n  DocumentData,\n  Part,\n  RetrieverAction,\n} from '@genkit-ai/ai/retriever';\nimport {\n  Firestore,\n  Query,\n  QueryDocumentSnapshot,\n  VectorQuerySnapshot,\n} from '@google-cloud/firestore';\nimport z from 'zod';\n\nfunction toContent(\n  d: QueryDocumentSnapshot,\n  contentField: string | ((snap: QueryDocumentSnapshot) => Part[])\n): Part[] {\n  if (typeof contentField === 'function') {\n    return contentField(d);\n  }\n\n  return [{ text: d.get(contentField) }];\n}\n\nfunction toDocuments(\n  result: VectorQuerySnapshot,\n  vectorField: string,\n  contentField: string | ((snap: QueryDocumentSnapshot) => Part[]),\n  metadataFields?:\n    | string[]\n    | ((snap: QueryDocumentSnapshot) => Record<string, any>)\n): DocumentData[] {\n  return result.docs.map((d) => {\n    const out: DocumentData = { content: toContent(d, contentField) };\n    if (typeof metadataFields === 'function') {\n      out.metadata = metadataFields(d);\n      return out;\n    }\n\n    out.metadata = { id: d.id };\n    if (metadataFields) {\n      for (const field of metadataFields) {\n        out.metadata[field] = d.get(field);\n      }\n      return out;\n    }\n\n    out.metadata = d.data();\n    delete out.metadata[vectorField];\n    if (typeof contentField === 'string') delete out.metadata[contentField];\n    return out;\n  });\n}\n\n/**\n * Define a retriever that uses vector similarity search to retrieve documents from Firestore.\n * You must create a vector index on the associated field before you can perform nearest-neighbor\n * search.\n **/\nexport function defineFirestoreRetriever(config: {\n  /** The name of the retriever. */\n  name: string;\n  /** Optional label for display in Developer UI. */\n  label?: string;\n  /** The Firestore database instance from which to query. */\n  firestore: Firestore;\n  /** The name of the collection from which to query. */\n  collection: string;\n  /** The embedder to use with this retriever. */\n  embedder: EmbedderArgument;\n  /** The name of the field within the collection containing the vector data. */\n  vectorField: string;\n  /** The name of the field containing the document content you wish to return. */\n  contentField: string | ((snap: QueryDocumentSnapshot) => Part[]);\n  /** The distance measure to use when comparing vectors. Defaults to 'COSINE'. */\n  distanceMeasure?: 'EUCLIDEAN' | 'COSINE' | 'DOT_PRODUCT';\n  /**\n   * A list of fields to include in the returned document metadata. If not supplied, all fields other\n   * than the vector are included. Alternatively, provide a transform function to extract the desired\n   * metadata fields from a snapshot.\n   **/\n  metadataFields?:\n    | string[]\n    | ((snap: QueryDocumentSnapshot) => Record<string, any>);\n}): RetrieverAction {\n  const {\n    name,\n    label,\n    firestore,\n    embedder,\n    collection,\n    vectorField,\n    metadataFields,\n    contentField,\n    distanceMeasure,\n  } = config;\n  return defineRetriever(\n    {\n      name,\n      info: {\n        label: label || `Firestore - ${name}`,\n      },\n      configSchema: z.object({\n        where: z.record(z.any()).optional(),\n        limit: z.number(),\n      }),\n    },\n    async (input, options) => {\n      const embedding = await embed({ embedder, content: input });\n      let query: Query = firestore.collection(collection);\n      for (const field in options.where || {}) {\n        query = query.where(field, '==', options.where![field]);\n      }\n      const result = await query\n        .findNearest(vectorField, embedding, {\n          limit: options.limit || 10,\n          distanceMeasure: distanceMeasure || 'COSINE',\n        })\n        .get();\n\n      return {\n        documents: toDocuments(\n          result,\n          vectorField,\n          contentField,\n          metadataFields\n        ),\n      };\n    }\n  );\n}\n"],"mappings":";;;AAgBA,SAAS,aAA+B;AACxC;AAAA,EACE;AAAA,OAIK;AAOP,OAAO,OAAO;AAEd,SAAS,UACP,GACA,cACQ;AACR,MAAI,OAAO,iBAAiB,YAAY;AACtC,WAAO,aAAa,CAAC;AAAA,EACvB;AAEA,SAAO,CAAC,EAAE,MAAM,EAAE,IAAI,YAAY,EAAE,CAAC;AACvC;AAEA,SAAS,YACP,QACA,aACA,cACA,gBAGgB;AAChB,SAAO,OAAO,KAAK,IAAI,CAAC,MAAM;AAC5B,UAAM,MAAoB,EAAE,SAAS,UAAU,GAAG,YAAY,EAAE;AAChE,QAAI,OAAO,mBAAmB,YAAY;AACxC,UAAI,WAAW,eAAe,CAAC;AAC/B,aAAO;AAAA,IACT;AAEA,QAAI,WAAW,EAAE,IAAI,EAAE,GAAG;AAC1B,QAAI,gBAAgB;AAClB,iBAAW,SAAS,gBAAgB;AAClC,YAAI,SAAS,KAAK,IAAI,EAAE,IAAI,KAAK;AAAA,MACnC;AACA,aAAO;AAAA,IACT;AAEA,QAAI,WAAW,EAAE,KAAK;AACtB,WAAO,IAAI,SAAS,WAAW;AAC/B,QAAI,OAAO,iBAAiB;AAAU,aAAO,IAAI,SAAS,YAAY;AACtE,WAAO;AAAA,EACT,CAAC;AACH;AAOO,SAAS,yBAAyB,QAyBrB;AAClB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,SAAO;AAAA,IACL;AAAA,MACE;AAAA,MACA,MAAM;AAAA,QACJ,OAAO,SAAS,eAAe,IAAI;AAAA,MACrC;AAAA,MACA,cAAc,EAAE,OAAO;AAAA,QACrB,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,QAClC,OAAO,EAAE,OAAO;AAAA,MAClB,CAAC;AAAA,IACH;AAAA,IACA,CAAO,OAAO,YAAY;AACxB,YAAM,YAAY,MAAM,MAAM,EAAE,UAAU,SAAS,MAAM,CAAC;AAC1D,UAAI,QAAe,UAAU,WAAW,UAAU;AAClD,iBAAW,SAAS,QAAQ,SAAS,CAAC,GAAG;AACvC,gBAAQ,MAAM,MAAM,OAAO,MAAM,QAAQ,MAAO,KAAK,CAAC;AAAA,MACxD;AACA,YAAM,SAAS,MAAM,MAClB,YAAY,aAAa,WAAW;AAAA,QACnC,OAAO,QAAQ,SAAS;AAAA,QACxB,iBAAiB,mBAAmB;AAAA,MACtC,CAAC,EACA,IAAI;AAEP,aAAO;AAAA,QACL,WAAW;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":[]}