import {
  __async
} from "./chunk-DJRN6NKF.mjs";
import { getApps, initializeApp } from "firebase-admin/app";
import { GoogleAuth } from "google-auth-library";
let auth;
function getAuthClient() {
  if (!auth) {
    auth = new GoogleAuth();
  }
  return auth;
}
const streamDelimiter = "\n";
function callHttpsFunction(functionName, location, data, streamingCallback) {
  return __async(this, null, function* () {
    const auth2 = getAuthClient();
    let funcUrl = yield getFunctionUrl(functionName, location);
    if (!funcUrl) {
      throw new Error(`Unable to retrieve uri for function at ${functionName}`);
    }
    const tokenClient = yield auth2.getIdTokenClient(funcUrl);
    const token = yield tokenClient.idTokenProvider.fetchIdToken(funcUrl);
    if (streamingCallback) {
      funcUrl += "?stream=true";
    }
    const res = yield fetch(funcUrl, {
      method: "POST",
      body: JSON.stringify(data),
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`
      }
    });
    if (streamingCallback) {
      const reader = res.body.getReader();
      const decoder = new TextDecoder();
      let buffer = "";
      while (true) {
        const result = yield reader.read();
        const decodedValue = decoder.decode(result.value);
        if (decodedValue) {
          buffer += decodedValue;
        }
        while (buffer.includes(streamDelimiter)) {
          streamingCallback(
            JSON.parse(buffer.substring(0, buffer.indexOf(streamDelimiter)))
          );
          buffer = buffer.substring(
            buffer.indexOf(streamDelimiter) + streamDelimiter.length
          );
        }
        if (result.done) {
          return buffer;
        }
      }
    }
    const responseText = yield res.text();
    return responseText;
  });
}
const functionUrlCache = {};
function getFunctionUrl(name, location) {
  return __async(this, null, function* () {
    var _a, _b;
    if (functionUrlCache[name]) {
      return functionUrlCache[name];
    }
    const auth2 = getAuthClient();
    const projectId = yield auth2.getProjectId();
    const url = `https://cloudfunctions.googleapis.com/v2beta/projects/${projectId}/locations/${location}/functions/${name}`;
    const client = yield auth2.getClient();
    const res = yield client.request({ url });
    const uri = (_b = (_a = res.data) == null ? void 0 : _a.serviceConfig) == null ? void 0 : _b.uri;
    if (!uri) {
      throw new Error(`Unable to retrieve uri for function at ${url}`);
    }
    functionUrlCache[name] = uri;
    return uri;
  });
}
function getErrorMessage(e) {
  if (e instanceof Error) {
    return e.message;
  }
  return `${e}`;
}
function getErrorStack(e) {
  if (e instanceof Error) {
    return e.stack;
  }
  return void 0;
}
function getLocation() {
  return process.env["GCLOUD_LOCATION"] || "us-central1";
}
function initializeAppIfNecessary() {
  if (!getApps().length) {
    initializeApp();
  }
}
export {
  callHttpsFunction,
  getErrorMessage,
  getErrorStack,
  getFunctionUrl,
  getLocation,
  initializeAppIfNecessary
};
//# sourceMappingURL=helpers.mjs.map