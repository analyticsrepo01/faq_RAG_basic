"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var firestoreTraceStore_exports = {};
__export(firestoreTraceStore_exports, {
  FirestoreTraceStore: () => FirestoreTraceStore,
  rebatchSpans: () => rebatchSpans
});
module.exports = __toCommonJS(firestoreTraceStore_exports);
var import_logging = require("@genkit-ai/core/logging");
var import_tracing = require("@genkit-ai/core/tracing");
var import_firestore = require("@google-cloud/firestore");
var import_crypto = require("crypto");
const DOC_MAX_SIZE = 1e6;
class FirestoreTraceStore {
  constructor(params = {}) {
    this.collection = params.collection || "genkit-traces";
    this.databaseId = params.databaseId || "(default)";
    this.expireAfterDays = params.expireAfterDays || 14;
    this.db = new import_firestore.Firestore({
      databaseId: this.databaseId,
      ignoreUndefinedProperties: true
    });
  }
  save(traceId, traceData) {
    return __async(this, null, function* () {
      const expireAt = Date.now() + this.expireAfterDays * 24 * 60 * 60 * 1e3;
      const traceInfo = __spreadProps(__spreadValues({}, traceData), {
        expireAt,
        spans: {}
      });
      const start = Date.now();
      const batches = rebatchSpans(traceData);
      let batchWrite = this.db.batch();
      batchWrite.set(
        this.db.collection(this.collection).doc(traceId),
        traceInfo,
        { merge: true }
      );
      batches.forEach((batch) => {
        batchWrite.create(
          this.db.collection(this.collection).doc(traceId).collection("spans").doc((0, import_crypto.randomUUID)()),
          {
            expireAt,
            spans: batch
          }
        );
      });
      yield batchWrite.commit();
      import_logging.logger.debug(
        `saved trace ${traceId}, ${Object.keys(traceData.spans).length} span(s) (${Date.now() - start}ms)`
      );
    });
  }
  load(traceId) {
    return __async(this, null, function* () {
      const [traceInfo, spanBatches] = yield Promise.all([
        this.db.collection(this.collection).doc(traceId).get(),
        this.db.collection(this.collection).doc(traceId).collection("spans").get()
      ]);
      const spans = {};
      spanBatches.forEach((batch) => {
        const spansBatch = batch.data().spans;
        Object.keys(spansBatch).forEach((key) => {
          spans[key] = import_tracing.SpanDataSchema.parse(spansBatch[key]);
        });
      });
      return import_tracing.TraceDataSchema.parse(__spreadProps(__spreadValues({}, traceInfo.data()), {
        spans
      }));
    });
  }
  list(query) {
    return __async(this, null, function* () {
      const limit = (query == null ? void 0 : query.limit) || 10;
      let fsQuery = this.db.collection(this.collection).orderBy("startTime", "desc");
      if (query == null ? void 0 : query.continuationToken) {
        fsQuery = fsQuery.startAfter(parseInt(query.continuationToken));
      }
      fsQuery = fsQuery.limit(limit);
      const data = yield fsQuery.get();
      const lastVisible = data.docs[data.docs.length - 1];
      return {
        traces: data.docs.map((d) => d.data()),
        continuationToken: data.docs.length === limit ? `${lastVisible.data().startTime}` : void 0
      };
    });
  }
}
function rebatchSpans(traceData) {
  const batches = [];
  let lastBatchRunningSize = 0;
  for (const span of Object.values(traceData.spans)) {
    let estimatedSpanSize = estimateSpanSize(span);
    if (estimatedSpanSize >= DOC_MAX_SIZE) {
      import_logging.logger.warn(
        `Truncating data for trace ${traceData.traceId} span ${span.spanId}`
      );
      truncateSpanData(span);
      estimatedSpanSize = estimateSpanSize(span);
    }
    if (lastBatchRunningSize + estimatedSpanSize < DOC_MAX_SIZE) {
      if (batches.length === 0) {
        batches.push({});
      }
    } else {
      batches.push({});
      lastBatchRunningSize = 0;
    }
    lastBatchRunningSize += estimatedSpanSize;
    batches[batches.length - 1][span.spanId] = span;
  }
  return batches;
}
function estimateSpanSize(span) {
  if (Object.values(span.attributes).length === 0) {
    return 0;
  }
  return Object.values(span.attributes).map((attr) => attr.toString().length).reduce((a, b) => a + b);
}
function truncateSpanData(span) {
  span.truncated = true;
  delete span.attributes["genkit:output"];
  if (estimateSpanSize(span) < DOC_MAX_SIZE) {
    return;
  }
  delete span.attributes["genkit:input"];
  if (estimateSpanSize(span) < DOC_MAX_SIZE) {
    return;
  }
  span.attributes = {};
  return;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FirestoreTraceStore,
  rebatchSpans
});
//# sourceMappingURL=firestoreTraceStore.js.map