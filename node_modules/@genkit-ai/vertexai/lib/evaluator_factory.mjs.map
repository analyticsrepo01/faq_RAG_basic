{"version":3,"sources":["../src/evaluator_factory.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseDataPoint, defineEvaluator, Score } from '@genkit-ai/ai/evaluator';\nimport { Action, GENKIT_CLIENT_HEADER } from '@genkit-ai/core';\nimport { runInNewSpan } from '@genkit-ai/core/tracing';\nimport { GoogleAuth } from 'google-auth-library';\nimport z from 'zod';\nimport { VertexAIEvaluationMetricType } from './evaluation.js';\n\nexport class EvaluatorFactory {\n  constructor(\n    private readonly auth: GoogleAuth,\n    private readonly location: string,\n    private readonly projectId: string\n  ) {}\n\n  create<ResponseType extends z.ZodTypeAny>(\n    config: {\n      metric: VertexAIEvaluationMetricType;\n      displayName: string;\n      definition: string;\n      responseSchema: ResponseType;\n    },\n    toRequest: (datapoint: BaseDataPoint) => any,\n    responseHandler: (response: z.infer<ResponseType>) => Score\n  ): Action {\n    return defineEvaluator(\n      {\n        name: `vertexai/${config.metric.toLocaleLowerCase()}`,\n        displayName: config.displayName,\n        definition: config.definition,\n      },\n      async (datapoint: BaseDataPoint) => {\n        const responseSchema = config.responseSchema;\n        const response = await this.evaluateInstances(\n          toRequest(datapoint),\n          responseSchema\n        );\n\n        return {\n          evaluation: responseHandler(response),\n          testCaseId: datapoint.testCaseId,\n        };\n      }\n    );\n  }\n\n  async evaluateInstances<ResponseType extends z.ZodTypeAny>(\n    partialRequest: any,\n    responseSchema: ResponseType\n  ): Promise<z.infer<ResponseType>> {\n    const locationName = `projects/${this.projectId}/locations/${this.location}`;\n    return await runInNewSpan(\n      {\n        metadata: {\n          name: 'EvaluationService#evaluateInstances',\n        },\n      },\n      async (metadata, _otSpan) => {\n        const request = {\n          location: locationName,\n          ...partialRequest,\n        };\n\n        metadata.input = request;\n        const client = await this.auth.getClient();\n        const url = `https://${this.location}-aiplatform.googleapis.com/v1beta1/${locationName}:evaluateInstances`;\n        const response = await client.request({\n          url,\n          method: 'POST',\n          body: JSON.stringify(request),\n          headers: {\n            'X-Goog-Api-Client': GENKIT_CLIENT_HEADER,\n          },\n        });\n        metadata.output = response.data;\n\n        try {\n          return responseSchema.parse(response.data);\n        } catch (e) {\n          throw new Error(`Error parsing ${url} API response: ${e}`);\n        }\n      }\n    );\n  }\n}\n"],"mappings":";;;;AAgBA,SAAwB,uBAA8B;AACtD,SAAiB,4BAA4B;AAC7C,SAAS,oBAAoB;AAKtB,MAAM,iBAAiB;AAAA,EAC5B,YACmB,MACA,UACA,WACjB;AAHiB;AACA;AACA;AAAA,EAChB;AAAA,EAEH,OACE,QAMA,WACA,iBACQ;AACR,WAAO;AAAA,MACL;AAAA,QACE,MAAM,YAAY,OAAO,OAAO,kBAAkB,CAAC;AAAA,QACnD,aAAa,OAAO;AAAA,QACpB,YAAY,OAAO;AAAA,MACrB;AAAA,MACA,CAAO,cAA6B;AAClC,cAAM,iBAAiB,OAAO;AAC9B,cAAM,WAAW,MAAM,KAAK;AAAA,UAC1B,UAAU,SAAS;AAAA,UACnB;AAAA,QACF;AAEA,eAAO;AAAA,UACL,YAAY,gBAAgB,QAAQ;AAAA,UACpC,YAAY,UAAU;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEM,kBACJ,gBACA,gBACgC;AAAA;AAChC,YAAM,eAAe,YAAY,KAAK,SAAS,cAAc,KAAK,QAAQ;AAC1E,aAAO,MAAM;AAAA,QACX;AAAA,UACE,UAAU;AAAA,YACR,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,CAAO,UAAU,YAAY;AAC3B,gBAAM,UAAU;AAAA,YACd,UAAU;AAAA,aACP;AAGL,mBAAS,QAAQ;AACjB,gBAAM,SAAS,MAAM,KAAK,KAAK,UAAU;AACzC,gBAAM,MAAM,WAAW,KAAK,QAAQ,sCAAsC,YAAY;AACtF,gBAAM,WAAW,MAAM,OAAO,QAAQ;AAAA,YACpC;AAAA,YACA,QAAQ;AAAA,YACR,MAAM,KAAK,UAAU,OAAO;AAAA,YAC5B,SAAS;AAAA,cACP,qBAAqB;AAAA,YACvB;AAAA,UACF,CAAC;AACD,mBAAS,SAAS,SAAS;AAE3B,cAAI;AACF,mBAAO,eAAe,MAAM,SAAS,IAAI;AAAA,UAC3C,SAAS,GAAG;AACV,kBAAM,IAAI,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,EAAE;AAAA,UAC3D;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AACF;","names":[]}