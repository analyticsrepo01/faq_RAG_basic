import * as _genkit_ai_ai_model from '@genkit-ai/ai/model';
import { ModelReference, GenerationCommonConfigSchema, GenerateRequest, GenerateResponseData } from '@genkit-ai/ai/model';
import * as zod from 'zod';
import { MessageCreateParamsBase, Message } from '@anthropic-ai/sdk/resources/messages';

declare const claude3Sonnet: ModelReference<zod.ZodObject<{
    version: zod.ZodOptional<zod.ZodString>;
    temperature: zod.ZodOptional<zod.ZodNumber>;
    maxOutputTokens: zod.ZodOptional<zod.ZodNumber>;
    topK: zod.ZodOptional<zod.ZodNumber>;
    topP: zod.ZodOptional<zod.ZodNumber>;
    stopSequences: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
}, "strip", zod.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}>>;
declare const claude3Haiku: ModelReference<zod.ZodObject<{
    version: zod.ZodOptional<zod.ZodString>;
    temperature: zod.ZodOptional<zod.ZodNumber>;
    maxOutputTokens: zod.ZodOptional<zod.ZodNumber>;
    topK: zod.ZodOptional<zod.ZodNumber>;
    topP: zod.ZodOptional<zod.ZodNumber>;
    stopSequences: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
}, "strip", zod.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}>>;
declare const claude3Opus: ModelReference<zod.ZodObject<{
    version: zod.ZodOptional<zod.ZodString>;
    temperature: zod.ZodOptional<zod.ZodNumber>;
    maxOutputTokens: zod.ZodOptional<zod.ZodNumber>;
    topK: zod.ZodOptional<zod.ZodNumber>;
    topP: zod.ZodOptional<zod.ZodNumber>;
    stopSequences: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
}, "strip", zod.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}>>;
declare const SUPPORTED_ANTHROPIC_MODELS: Record<string, ModelReference<typeof GenerationCommonConfigSchema>>;
declare function anthropicModel(modelName: string, projectId: string, region: string): _genkit_ai_ai_model.ModelAction<zod.ZodObject<{
    version: zod.ZodOptional<zod.ZodString>;
    temperature: zod.ZodOptional<zod.ZodNumber>;
    maxOutputTokens: zod.ZodOptional<zod.ZodNumber>;
    topK: zod.ZodOptional<zod.ZodNumber>;
    topP: zod.ZodOptional<zod.ZodNumber>;
    stopSequences: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
}, "strip", zod.ZodTypeAny, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}, {
    version?: string | undefined;
    temperature?: number | undefined;
    maxOutputTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    stopSequences?: string[] | undefined;
}>>;
declare function toAnthropicRequest(model: string, input: GenerateRequest<typeof GenerationCommonConfigSchema>): MessageCreateParamsBase;
declare function fromAnthropicResponse(input: GenerateRequest<typeof GenerationCommonConfigSchema>, response: Message): GenerateResponseData;

export { SUPPORTED_ANTHROPIC_MODELS, anthropicModel, claude3Haiku, claude3Opus, claude3Sonnet, fromAnthropicResponse, toAnthropicRequest };
