import {
  __async,
  __spreadValues
} from "./chunk-WFI2LP4G.mjs";
import { defineEvaluator } from "@genkit-ai/ai/evaluator";
import { GENKIT_CLIENT_HEADER } from "@genkit-ai/core";
import { runInNewSpan } from "@genkit-ai/core/tracing";
class EvaluatorFactory {
  constructor(auth, location, projectId) {
    this.auth = auth;
    this.location = location;
    this.projectId = projectId;
  }
  create(config, toRequest, responseHandler) {
    return defineEvaluator(
      {
        name: `vertexai/${config.metric.toLocaleLowerCase()}`,
        displayName: config.displayName,
        definition: config.definition
      },
      (datapoint) => __async(this, null, function* () {
        const responseSchema = config.responseSchema;
        const response = yield this.evaluateInstances(
          toRequest(datapoint),
          responseSchema
        );
        return {
          evaluation: responseHandler(response),
          testCaseId: datapoint.testCaseId
        };
      })
    );
  }
  evaluateInstances(partialRequest, responseSchema) {
    return __async(this, null, function* () {
      const locationName = `projects/${this.projectId}/locations/${this.location}`;
      return yield runInNewSpan(
        {
          metadata: {
            name: "EvaluationService#evaluateInstances"
          }
        },
        (metadata, _otSpan) => __async(this, null, function* () {
          const request = __spreadValues({
            location: locationName
          }, partialRequest);
          metadata.input = request;
          const client = yield this.auth.getClient();
          const url = `https://${this.location}-aiplatform.googleapis.com/v1beta1/${locationName}:evaluateInstances`;
          const response = yield client.request({
            url,
            method: "POST",
            body: JSON.stringify(request),
            headers: {
              "X-Goog-Api-Client": GENKIT_CLIENT_HEADER
            }
          });
          metadata.output = response.data;
          try {
            return responseSchema.parse(response.data);
          } catch (e) {
            throw new Error(`Error parsing ${url} API response: ${e}`);
          }
        })
      );
    });
  }
}
export {
  EvaluatorFactory
};
//# sourceMappingURL=evaluator_factory.mjs.map