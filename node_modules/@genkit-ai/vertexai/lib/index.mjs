import {
  __async
} from "./chunk-WFI2LP4G.mjs";
import { genkitPlugin } from "@genkit-ai/core";
import { VertexAI } from "@google-cloud/vertexai";
import { GoogleAuth } from "google-auth-library";
import {
  anthropicModel,
  claude3Haiku,
  claude3Opus,
  claude3Sonnet,
  SUPPORTED_ANTHROPIC_MODELS
} from "./anthropic.js";
import {
  SUPPORTED_EMBEDDER_MODELS,
  textEmbeddingGecko,
  textEmbeddingGeckoEmbedder
} from "./embedder.js";
import {
  VertexAIEvaluationMetricType,
  vertexEvaluators
} from "./evaluation.js";
import {
  gemini15FlashPreview,
  gemini15ProPreview,
  geminiModel,
  geminiPro,
  geminiProVision,
  SUPPORTED_GEMINI_MODELS
} from "./gemini.js";
import { imagen2, imagen2Model } from "./imagen.js";
const vertexAI = genkitPlugin(
  "vertexai",
  (options) => __async(void 0, null, function* () {
    const authClient = new GoogleAuth(options == null ? void 0 : options.googleAuth);
    const projectId = (options == null ? void 0 : options.projectId) || (yield authClient.getProjectId());
    const location = (options == null ? void 0 : options.location) || "us-central1";
    const confError = (parameter, envVariableName) => {
      return new Error(
        `VertexAI Plugin is missing the '${parameter}' configuration. Please set the '${envVariableName}' environment variable or explicitly pass '${parameter}' into genkit config.`
      );
    };
    if (!location) {
      throw confError("location", "GCLOUD_LOCATION");
    }
    if (!projectId) {
      throw confError("project", "GCLOUD_PROJECT");
    }
    const vertexClient = new VertexAI({
      project: projectId,
      location,
      googleAuthOptions: options == null ? void 0 : options.googleAuth
    });
    const metrics = (options == null ? void 0 : options.evaluation) && options.evaluation.metrics.length > 0 ? options.evaluation.metrics : [];
    const models = [
      imagen2Model(authClient, { projectId, location }),
      ...Object.keys(SUPPORTED_GEMINI_MODELS).map(
        (name) => geminiModel(name, vertexClient)
      )
    ];
    if (options == null ? void 0 : options.modelGardenModels) {
      options == null ? void 0 : options.modelGardenModels.forEach((m) => {
        const entry = Object.entries(SUPPORTED_ANTHROPIC_MODELS).find(
          ([_, value]) => value.name === m.name
        );
        if (!entry) {
          throw new Error(`Unsupported model garden model: ${m.name}`);
        }
        models.push(anthropicModel(entry[0], projectId, location));
      });
    }
    return {
      models,
      embedders: [
        ...Object.keys(SUPPORTED_EMBEDDER_MODELS).map(
          (name) => textEmbeddingGeckoEmbedder(name, authClient, { projectId, location })
        )
      ],
      evaluators: vertexEvaluators(authClient, metrics, projectId, location)
    };
  })
);
var src_default = vertexAI;
export {
  VertexAIEvaluationMetricType,
  claude3Haiku,
  claude3Opus,
  claude3Sonnet,
  src_default as default,
  gemini15FlashPreview,
  gemini15ProPreview,
  geminiPro,
  geminiProVision,
  imagen2,
  textEmbeddingGecko,
  vertexAI
};
//# sourceMappingURL=index.mjs.map