{"version":3,"sources":["../src/embedder.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  defineEmbedder,\n  embedderRef,\n  EmbedderReference,\n} from '@genkit-ai/ai/embedder';\nimport { GoogleAuth } from 'google-auth-library';\nimport { z } from 'zod';\nimport { PluginOptions } from './index.js';\nimport { predictModel } from './predict.js';\n\nexport const TaskTypeSchema = z.enum([\n  'RETRIEVAL_DOCUMENT',\n  'RETRIEVAL_QUERY',\n  'SEMANTIC_SIMILARITY',\n  'CLASSIFICATION',\n  'CLUSTERING',\n]);\nexport type TaskType = z.infer<typeof TaskTypeSchema>;\n\nexport const TextEmbeddingGeckoConfigSchema = z.object({\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: z.string().optional(),\n});\nexport type TextEmbeddingGeckoConfig = z.infer<\n  typeof TextEmbeddingGeckoConfigSchema\n>;\n\nexport const textEmbeddingGecko003 = embedderRef({\n  name: 'vertexai/textembedding-gecko@003',\n  configSchema: TextEmbeddingGeckoConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Vertex AI - Text Embedding Gecko',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n\nexport const textEmbeddingGecko002 = embedderRef({\n  name: 'vertexai/textembedding-gecko@002',\n  configSchema: TextEmbeddingGeckoConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Vertex AI - Text Embedding Gecko',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n\nexport const textEmbeddingGecko001 = embedderRef({\n  name: 'vertexai/textembedding-gecko@001',\n  configSchema: TextEmbeddingGeckoConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Vertex AI - Text Embedding Gecko (Legacy)',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n\n/*\n// @TODO(huangjeff): Fix multilingual text embedding gecko\n// For some reason this model returns 404 but it exists in the reference docs:\n// https://cloud.google.com/vertex-ai/generative-ai/docs/embeddings/get-text-embeddings\n\nexport const textEmbeddingGeckoMultilingual001 = embedderRef({\n  name: 'vertexai/textembedding-gecko-multilingual@001',\n  configSchema: TextEmbeddingGeckoConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Vertex AI - Multilingual Text Embedding Gecko',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n*/\n\nexport const textEmbeddingGecko = textEmbeddingGecko003;\n\nexport const SUPPORTED_EMBEDDER_MODELS: Record<string, EmbedderReference> = {\n  'textembedding-gecko@003': textEmbeddingGecko003,\n  'textembedding-gecko@002': textEmbeddingGecko002,\n  'textembedding-gecko@001': textEmbeddingGecko001,\n  //'textembeddding-gecko-multilingual@001': textEmbeddingGeckoMultilingual001,\n};\n\ninterface EmbeddingInstance {\n  task_type?: TaskType;\n  content: string;\n  title?: string;\n}\ninterface EmbeddingPrediction {\n  embeddings: {\n    statistics: {\n      truncated: boolean;\n      token_count: number;\n    };\n    values: number[];\n  };\n}\n\nexport function textEmbeddingGeckoEmbedder(\n  name: string,\n  client: GoogleAuth,\n  options: PluginOptions\n) {\n  const embedder = SUPPORTED_EMBEDDER_MODELS[name];\n  // TODO: Figure out how to allow different versions while still sharing a single implementation.\n  const predict = predictModel<EmbeddingInstance, EmbeddingPrediction>(\n    client,\n    options,\n    name\n  );\n  return defineEmbedder(\n    {\n      name: embedder.name,\n      configSchema: embedder.configSchema,\n      info: embedder.info!,\n    },\n    async (input, options) => {\n      const response = await predict(\n        input.map((i) => {\n          return {\n            content: i.text(),\n            task_type: options?.taskType,\n            title: options?.title,\n          };\n        })\n      );\n      return {\n        embeddings: response.predictions.map((p) => ({\n          embedding: p.embeddings.values,\n        })),\n      };\n    }\n  );\n}\n"],"mappings":";;;AAgBA;AAAA,EACE;AAAA,EACA;AAAA,OAEK;AAEP,SAAS,SAAS;AAElB,SAAS,oBAAoB;AAEtB,MAAM,iBAAiB,EAAE,KAAK;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAGM,MAAM,iCAAiC,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrD,UAAU,eAAe,SAAS;AAAA,EAClC,OAAO,EAAE,OAAO,EAAE,SAAS;AAC7B,CAAC;AAKM,MAAM,wBAAwB,YAAY;AAAA,EAC/C,MAAM;AAAA,EACN,cAAc;AAAA,EACd,MAAM;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,UAAU;AAAA,MACR,OAAO,CAAC,MAAM;AAAA,IAChB;AAAA,EACF;AACF,CAAC;AAEM,MAAM,wBAAwB,YAAY;AAAA,EAC/C,MAAM;AAAA,EACN,cAAc;AAAA,EACd,MAAM;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,UAAU;AAAA,MACR,OAAO,CAAC,MAAM;AAAA,IAChB;AAAA,EACF;AACF,CAAC;AAEM,MAAM,wBAAwB,YAAY;AAAA,EAC/C,MAAM;AAAA,EACN,cAAc;AAAA,EACd,MAAM;AAAA,IACJ,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,UAAU;AAAA,MACR,OAAO,CAAC,MAAM;AAAA,IAChB;AAAA,EACF;AACF,CAAC;AAoBM,MAAM,qBAAqB;AAE3B,MAAM,4BAA+D;AAAA,EAC1E,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA;AAE7B;AAiBO,SAAS,2BACd,MACA,QACA,SACA;AACA,QAAM,WAAW,0BAA0B,IAAI;AAE/C,QAAM,UAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,MACE,MAAM,SAAS;AAAA,MACf,cAAc,SAAS;AAAA,MACvB,MAAM,SAAS;AAAA,IACjB;AAAA,IACA,CAAO,OAAOA,aAAY;AACxB,YAAM,WAAW,MAAM;AAAA,QACrB,MAAM,IAAI,CAAC,MAAM;AACf,iBAAO;AAAA,YACL,SAAS,EAAE,KAAK;AAAA,YAChB,WAAWA,YAAA,gBAAAA,SAAS;AAAA,YACpB,OAAOA,YAAA,gBAAAA,SAAS;AAAA,UAClB;AAAA,QACF,CAAC;AAAA,MACH;AACA,aAAO;AAAA,QACL,YAAY,SAAS,YAAY,IAAI,CAAC,OAAO;AAAA,UAC3C,WAAW,EAAE,WAAW;AAAA,QAC1B,EAAE;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AACF;","names":["options"]}