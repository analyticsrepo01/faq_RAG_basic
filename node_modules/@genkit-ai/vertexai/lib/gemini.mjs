import {
  __async,
  __forAwait,
  __spreadProps,
  __spreadValues
} from "./chunk-WFI2LP4G.mjs";
import {
  defineModel,
  GenerationCommonConfigSchema,
  getBasicUsageStats,
  modelRef
} from "@genkit-ai/ai/model";
import {
  downloadRequestMedia,
  simulateSystemPrompt
} from "@genkit-ai/ai/model/middleware";
import { GENKIT_CLIENT_HEADER } from "@genkit-ai/core";
import {
  FunctionDeclarationSchemaType,
  HarmBlockThreshold,
  HarmCategory
} from "@google-cloud/vertexai";
import { z } from "zod";
const SafetySettingsSchema = z.object({
  category: z.nativeEnum(HarmCategory),
  threshold: z.nativeEnum(HarmBlockThreshold)
});
const GeminiConfigSchema = GenerationCommonConfigSchema.extend({
  safetySettings: z.array(SafetySettingsSchema).optional()
});
const geminiPro = modelRef({
  name: "vertexai/gemini-1.0-pro",
  info: {
    label: "Vertex AI - Gemini Pro",
    versions: ["gemini-1.0-pro", "gemini-1.0-pro-001"],
    supports: {
      multiturn: true,
      media: false,
      tools: true,
      systemRole: true
    }
  },
  configSchema: GeminiConfigSchema
});
const geminiProVision = modelRef({
  name: "vertexai/gemini-1.0-pro-vision",
  info: {
    label: "Vertex AI - Gemini Pro Vision",
    versions: ["gemini-1.0-pro-vision", "gemini-1.0-pro-vision-001"],
    supports: {
      multiturn: true,
      media: true,
      tools: false,
      systemRole: false
    }
  },
  configSchema: GeminiConfigSchema
});
const gemini15ProPreview = modelRef({
  name: "vertexai/gemini-1.5-pro-preview",
  info: {
    label: "Vertex AI - Gemini 1.5 Pro Preview",
    versions: ["gemini-1.5-pro-preview-0409"],
    supports: {
      multiturn: true,
      media: true,
      tools: true,
      systemRole: true
    }
  },
  configSchema: GeminiConfigSchema,
  version: "gemini-1.5-pro-preview-0409"
});
const gemini15FlashPreview = modelRef({
  name: "vertexai/gemini-1.5-flash-preview",
  info: {
    label: "Vertex AI - Gemini 1.5 Flash",
    versions: ["gemini-1.5-flash-preview-0514"],
    supports: {
      multiturn: true,
      media: true,
      tools: true,
      systemRole: true
    }
  },
  configSchema: GeminiConfigSchema,
  version: "gemini-1.5-flash-preview-0514"
});
const SUPPORTED_V1_MODELS = {
  "gemini-1.0-pro": geminiPro,
  "gemini-1.0-pro-vision": geminiProVision
  // 'gemini-ultra': geminiUltra,
};
const SUPPORTED_V15_MODELS = {
  "gemini-1.5-pro-preview": gemini15ProPreview,
  "gemini-1.5-flash-preview": gemini15FlashPreview
};
const SUPPORTED_GEMINI_MODELS = __spreadValues(__spreadValues({}, SUPPORTED_V1_MODELS), SUPPORTED_V15_MODELS);
function toGeminiRole(role, model) {
  switch (role) {
    case "user":
      return "user";
    case "model":
      return "model";
    case "system":
      if (model && SUPPORTED_V15_MODELS[model.name]) {
        throw new Error(
          "system role is only supported for a single message in the first position"
        );
      } else {
        throw new Error("system role is not supported");
      }
    case "tool":
      return "function";
    default:
      return "user";
  }
}
const toGeminiTool = (tool) => {
  const declaration = {
    name: tool.name.replace(/\//g, "__"),
    // Gemini throws on '/' in tool name
    description: tool.description,
    parameters: convertSchemaProperty(tool.inputSchema)
  };
  return declaration;
};
const toGeminiFileDataPart = (part) => {
  const media = part.media;
  if (media.url.startsWith("gs://")) {
    if (!media.contentType)
      throw new Error(
        "Must supply contentType when using media from gs:// URLs."
      );
    return {
      fileData: {
        mimeType: media.contentType,
        fileUri: media.url
      }
    };
  } else if (media.url.startsWith("data:")) {
    const dataUrl = media.url;
    const b64Data = dataUrl.substring(dataUrl.indexOf(",") + 1);
    const contentType = media.contentType || dataUrl.substring(dataUrl.indexOf(":") + 1, dataUrl.indexOf(";"));
    return { inlineData: { mimeType: contentType, data: b64Data } };
  }
  throw Error(
    "Could not convert genkit part to gemini tool response part: missing file data"
  );
};
const toGeminiToolRequestPart = (part) => {
  var _a;
  if (!((_a = part == null ? void 0 : part.toolRequest) == null ? void 0 : _a.input)) {
    throw Error(
      "Could not convert genkit part to gemini tool response part: missing tool request data"
    );
  }
  return {
    functionCall: {
      name: part.toolRequest.name,
      args: part.toolRequest.input
    }
  };
};
const toGeminiToolResponsePart = (part) => {
  var _a;
  if (!((_a = part == null ? void 0 : part.toolResponse) == null ? void 0 : _a.output)) {
    throw Error(
      "Could not convert genkit part to gemini tool response part: missing tool response data"
    );
  }
  return {
    functionResponse: {
      name: part.toolResponse.name,
      response: {
        name: part.toolResponse.name,
        content: part.toolResponse.output
      }
    }
  };
};
function toGeminiSystemInstruction(message) {
  return {
    role: "user",
    parts: message.content.map(toGeminiPart)
  };
}
function toGeminiMessage(message, model) {
  return {
    role: toGeminiRole(message.role, model),
    parts: message.content.map(toGeminiPart)
  };
}
function fromGeminiFinishReason(reason) {
  if (!reason)
    return "unknown";
  switch (reason) {
    case "STOP":
      return "stop";
    case "MAX_TOKENS":
      return "length";
    case "SAFETY":
    case "RECITATION":
      return "blocked";
    default:
      return "unknown";
  }
}
function toGeminiPart(part) {
  if (part.text) {
    return { text: part.text };
  } else if (part.media) {
    return toGeminiFileDataPart(part);
  } else if (part.toolRequest) {
    return toGeminiToolRequestPart(part);
  } else if (part.toolResponse) {
    return toGeminiToolResponsePart(part);
  } else {
    throw new Error("unsupported type");
  }
}
function fromGeminiInlineDataPart(part) {
  if (!part.inlineData || !part.inlineData.hasOwnProperty("mimeType") || !part.inlineData.hasOwnProperty("data")) {
    throw new Error("Invalid GeminiPart: missing required properties");
  }
  const { mimeType, data } = part.inlineData;
  const dataUrl = `data:${mimeType};base64,${data}`;
  return {
    media: {
      url: dataUrl,
      contentType: mimeType
    }
  };
}
function fromGeminiFileDataPart(part) {
  var _a, _b;
  if (!part.fileData || !part.fileData.hasOwnProperty("mimeType") || !part.fileData.hasOwnProperty("url")) {
    throw new Error(
      "Invalid Gemini File Data Part: missing required properties"
    );
  }
  return {
    media: {
      url: (_a = part.fileData) == null ? void 0 : _a.fileUri,
      contentType: (_b = part.fileData) == null ? void 0 : _b.mimeType
    }
  };
}
function fromGeminiFunctionCallPart(part) {
  if (!part.functionCall) {
    throw new Error(
      "Invalid Gemini Function Call Part: missing function call data"
    );
  }
  return {
    toolRequest: {
      name: part.functionCall.name,
      input: part.functionCall.args
    }
  };
}
function fromGeminiFunctionResponsePart(part) {
  if (!part.functionResponse) {
    throw new Error(
      "Invalid Gemini Function Call Part: missing function call data"
    );
  }
  return {
    toolResponse: {
      name: part.functionResponse.name.replace(/__/g, "/"),
      // restore slashes
      output: part.functionResponse.response
    }
  };
}
function fromGeminiPart(part) {
  if (part.text !== void 0)
    return { text: part.text };
  if (part.functionCall)
    return fromGeminiFunctionCallPart(part);
  if (part.functionResponse)
    return fromGeminiFunctionResponsePart(part);
  if (part.inlineData)
    return fromGeminiInlineDataPart(part);
  if (part.fileData)
    return fromGeminiFileDataPart(part);
  throw new Error(
    "Part type is unsupported/corrupted. Either data is missing or type cannot be inferred from type."
  );
}
function fromGeminiCandidate(candidate) {
  const parts = candidate.content.parts || [];
  const genkitCandidate = {
    index: candidate.index || 0,
    // reasonable default?
    message: {
      role: "model",
      content: parts.map(fromGeminiPart)
    },
    finishReason: fromGeminiFinishReason(candidate.finishReason),
    finishMessage: candidate.finishMessage,
    custom: {
      safetyRatings: candidate.safetyRatings,
      citationMetadata: candidate.citationMetadata
    }
  };
  return genkitCandidate;
}
const convertSchemaProperty = (property) => {
  if (!property) {
    return null;
  }
  if (property.type === "object") {
    const nestedProperties = {};
    Object.keys(property.properties).forEach((key) => {
      nestedProperties[key] = convertSchemaProperty(property.properties[key]);
    });
    return {
      type: FunctionDeclarationSchemaType.OBJECT,
      properties: nestedProperties,
      required: property.required
    };
  } else if (property.type === "array") {
    return {
      type: FunctionDeclarationSchemaType.ARRAY,
      items: convertSchemaProperty(property.items)
    };
  } else {
    return {
      type: FunctionDeclarationSchemaType[property.type.toUpperCase()]
    };
  }
};
function geminiModel(name, vertex) {
  var _a, _b;
  const modelName = `vertexai/${name}`;
  const model = SUPPORTED_GEMINI_MODELS[name];
  if (!model)
    throw new Error(`Unsupported model: ${name}`);
  const middlewares = [];
  if (SUPPORTED_V1_MODELS[name]) {
    middlewares.push(simulateSystemPrompt());
  }
  if ((_b = (_a = model == null ? void 0 : model.info) == null ? void 0 : _a.supports) == null ? void 0 : _b.media) {
    middlewares.push(downloadRequestMedia({ maxBytes: 1024 * 1024 * 20 }));
  }
  return defineModel(
    __spreadProps(__spreadValues({
      name: modelName
    }, model.info), {
      configSchema: GeminiConfigSchema,
      use: middlewares
    }),
    (request, streamingCallback) => __async(this, null, function* () {
      var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
      const client = vertex.preview.getGenerativeModel(
        {
          model: ((_a2 = request.config) == null ? void 0 : _a2.version) || model.version || name
        },
        {
          apiClient: GENKIT_CLIENT_HEADER
        }
      );
      const messages = [...request.messages];
      if (messages.length === 0)
        throw new Error("No messages provided.");
      let systemInstruction = void 0;
      if (SUPPORTED_V15_MODELS[name]) {
        const systemMessage = messages.find((m) => m.role === "system");
        if (systemMessage) {
          messages.splice(messages.indexOf(systemMessage), 1);
          systemInstruction = toGeminiSystemInstruction(systemMessage);
        }
      }
      const chatRequest = {
        systemInstruction,
        tools: ((_b2 = request.tools) == null ? void 0 : _b2.length) ? [{ functionDeclarations: (_c = request.tools) == null ? void 0 : _c.map(toGeminiTool) }] : [],
        history: messages.slice(0, -1).map((message) => toGeminiMessage(message, model)),
        generationConfig: {
          candidateCount: request.candidates || void 0,
          temperature: (_d = request.config) == null ? void 0 : _d.temperature,
          maxOutputTokens: (_e = request.config) == null ? void 0 : _e.maxOutputTokens,
          topK: (_f = request.config) == null ? void 0 : _f.topK,
          topP: (_g = request.config) == null ? void 0 : _g.topP,
          stopSequences: (_h = request.config) == null ? void 0 : _h.stopSequences
        },
        safetySettings: (_i = request.config) == null ? void 0 : _i.safetySettings
      };
      const msg = toGeminiMessage(messages[messages.length - 1], model);
      if (streamingCallback) {
        const result = yield client.startChat(chatRequest).sendMessageStream(msg.parts);
        try {
          for (var iter = __forAwait(result.stream), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
            const item = temp.value;
            (_j = item.candidates) == null ? void 0 : _j.forEach((candidate) => {
              const c = fromGeminiCandidate(candidate);
              streamingCallback({
                index: c.index,
                content: c.message.content
              });
            });
          }
        } catch (temp) {
          error = [temp];
        } finally {
          try {
            more && (temp = iter.return) && (yield temp.call(iter));
          } finally {
            if (error)
              throw error[0];
          }
        }
        const response = yield result.response;
        if (!((_k = response.candidates) == null ? void 0 : _k.length)) {
          throw new Error("No valid candidates returned.");
        }
        return {
          candidates: ((_l = response.candidates) == null ? void 0 : _l.map(fromGeminiCandidate)) || [],
          custom: response
        };
      } else {
        let result;
        try {
          result = yield client.startChat(chatRequest).sendMessage(msg.parts);
        } catch (err) {
          throw new Error(`Vertex response generation failed: ${err}`);
        }
        if (!((_m = result == null ? void 0 : result.response.candidates) == null ? void 0 : _m.length)) {
          throw new Error("No valid candidates returned.");
        }
        const responseCandidates = ((_n = result.response.candidates) == null ? void 0 : _n.map(fromGeminiCandidate)) || [];
        return {
          candidates: responseCandidates,
          custom: result.response,
          usage: getBasicUsageStats(request.messages, responseCandidates)
        };
      }
    })
  );
}
export {
  SUPPORTED_GEMINI_MODELS,
  SUPPORTED_V15_MODELS,
  SUPPORTED_V1_MODELS,
  fromGeminiCandidate,
  gemini15FlashPreview,
  gemini15ProPreview,
  geminiModel,
  geminiPro,
  geminiProVision,
  toGeminiMessage,
  toGeminiSystemInstruction
};
//# sourceMappingURL=gemini.mjs.map