import { ModelReference, MessageData, CandidateData, ModelAction } from '@genkit-ai/ai/model';
import { HarmCategory, HarmBlockThreshold, Content, GenerateContentCandidate, VertexAI } from '@google-cloud/vertexai';
import { z } from 'zod';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare const geminiPro: ModelReference<z.ZodObject<{
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    version: z.ZodOptional<z.ZodString>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}>>;
declare const geminiProVision: ModelReference<z.ZodObject<{
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    version: z.ZodOptional<z.ZodString>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}>>;
declare const gemini15ProPreview: ModelReference<z.ZodObject<{
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    version: z.ZodOptional<z.ZodString>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}>>;
declare const gemini15FlashPreview: ModelReference<z.ZodObject<{
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    version: z.ZodOptional<z.ZodString>;
    safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        category: z.ZodNativeEnum<typeof HarmCategory>;
        threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
    }, "strip", z.ZodTypeAny, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }, {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    safetySettings?: {
        category: HarmCategory;
        threshold: HarmBlockThreshold;
    }[] | undefined;
}>>;
declare const SUPPORTED_V1_MODELS: {
    'gemini-1.0-pro': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
    'gemini-1.0-pro-vision': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
};
declare const SUPPORTED_V15_MODELS: {
    'gemini-1.5-pro-preview': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
    'gemini-1.5-flash-preview': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
};
declare const SUPPORTED_GEMINI_MODELS: {
    'gemini-1.5-pro-preview': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
    'gemini-1.5-flash-preview': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
    'gemini-1.0-pro': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
    'gemini-1.0-pro-vision': ModelReference<z.ZodObject<{
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        safetySettings: z.ZodOptional<z.ZodArray<z.ZodObject<{
            category: z.ZodNativeEnum<typeof HarmCategory>;
            threshold: z.ZodNativeEnum<typeof HarmBlockThreshold>;
        }, "strip", z.ZodTypeAny, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }, {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }, {
        maxOutputTokens?: number | undefined;
        stopSequences?: string[] | undefined;
        temperature?: number | undefined;
        topK?: number | undefined;
        topP?: number | undefined;
        version?: string | undefined;
        safetySettings?: {
            category: HarmCategory;
            threshold: HarmBlockThreshold;
        }[] | undefined;
    }>>;
};
declare function toGeminiSystemInstruction(message: MessageData): Content;
declare function toGeminiMessage(message: MessageData, model?: ModelReference<z.ZodTypeAny>): Content;
declare function fromGeminiCandidate(candidate: GenerateContentCandidate): CandidateData;
/**
 *
 */
declare function geminiModel(name: string, vertex: VertexAI): ModelAction;

export { SUPPORTED_GEMINI_MODELS, SUPPORTED_V15_MODELS, SUPPORTED_V1_MODELS, fromGeminiCandidate, gemini15FlashPreview, gemini15ProPreview, geminiModel, geminiPro, geminiProVision, toGeminiMessage, toGeminiSystemInstruction };
