{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ModelReference } from '@genkit-ai/ai/model';\nimport { genkitPlugin, Plugin } from '@genkit-ai/core';\nimport { VertexAI } from '@google-cloud/vertexai';\nimport { GoogleAuth, GoogleAuthOptions } from 'google-auth-library';\nimport {\n  anthropicModel,\n  claude3Haiku,\n  claude3Opus,\n  claude3Sonnet,\n  SUPPORTED_ANTHROPIC_MODELS,\n} from './anthropic.js';\nimport {\n  SUPPORTED_EMBEDDER_MODELS,\n  textEmbeddingGecko,\n  textEmbeddingGeckoEmbedder,\n} from './embedder.js';\nimport {\n  VertexAIEvaluationMetric,\n  VertexAIEvaluationMetricType,\n  vertexEvaluators,\n} from './evaluation.js';\nimport {\n  gemini15FlashPreview,\n  gemini15ProPreview,\n  geminiModel,\n  geminiPro,\n  geminiProVision,\n  SUPPORTED_GEMINI_MODELS,\n} from './gemini.js';\nimport { imagen2, imagen2Model } from './imagen.js';\n\nexport {\n  claude3Haiku,\n  claude3Opus,\n  claude3Sonnet,\n  gemini15FlashPreview,\n  gemini15ProPreview,\n  geminiPro,\n  geminiProVision,\n  imagen2,\n  textEmbeddingGecko,\n  VertexAIEvaluationMetricType as VertexAIEvaluationMetricType,\n};\n\nexport interface PluginOptions {\n  /** The Google Cloud project id to call. */\n  projectId?: string;\n  /** The Google Cloud region to call. */\n  location: string;\n  /** Provide custom authentication configuration for connecting to Vertex AI. */\n  googleAuth?: GoogleAuthOptions;\n  /** Configure Vertex AI evaluators */\n  evaluation?: {\n    metrics: VertexAIEvaluationMetric[];\n  };\n  modelGardenModels?: ModelReference<any>[];\n}\n\n/**\n * Add Google Cloud Vertex AI to Genkit. Includes Gemini and Imagen models and text embedder.\n */\nexport const vertexAI: Plugin<[PluginOptions] | []> = genkitPlugin(\n  'vertexai',\n  async (options?: PluginOptions) => {\n    const authClient = new GoogleAuth(options?.googleAuth);\n    const projectId = options?.projectId || (await authClient.getProjectId());\n    const location = options?.location || 'us-central1';\n\n    const confError = (parameter: string, envVariableName: string) => {\n      return new Error(\n        `VertexAI Plugin is missing the '${parameter}' configuration. Please set the '${envVariableName}' environment variable or explicitly pass '${parameter}' into genkit config.`\n      );\n    };\n    if (!location) {\n      throw confError('location', 'GCLOUD_LOCATION');\n    }\n    if (!projectId) {\n      throw confError('project', 'GCLOUD_PROJECT');\n    }\n\n    const vertexClient = new VertexAI({\n      project: projectId,\n      location,\n      googleAuthOptions: options?.googleAuth,\n    });\n    const metrics =\n      options?.evaluation && options.evaluation.metrics.length > 0\n        ? options.evaluation.metrics\n        : [];\n\n    const models = [\n      imagen2Model(authClient, { projectId, location }),\n      ...Object.keys(SUPPORTED_GEMINI_MODELS).map((name) =>\n        geminiModel(name, vertexClient)\n      ),\n    ];\n\n    if (options?.modelGardenModels) {\n      options?.modelGardenModels.forEach((m) => {\n        const entry = Object.entries(SUPPORTED_ANTHROPIC_MODELS).find(\n          ([_, value]) => value.name === m.name\n        );\n        if (!entry) {\n          throw new Error(`Unsupported model garden model: ${m.name}`);\n        }\n        models.push(anthropicModel(entry[0], projectId, location));\n      });\n    }\n\n    return {\n      models,\n      embedders: [\n        ...Object.keys(SUPPORTED_EMBEDDER_MODELS).map((name) =>\n          textEmbeddingGeckoEmbedder(name, authClient, { projectId, location })\n        ),\n      ],\n      evaluators: vertexEvaluators(authClient, metrics, projectId, location),\n    };\n  }\n);\n\nexport default vertexAI;\n"],"mappings":";;;AAiBA,SAAS,oBAA4B;AACrC,SAAS,gBAAgB;AACzB,SAAS,kBAAqC;AAC9C;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EAEE;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,SAAS,oBAAoB;AAgC/B,MAAM,WAAyC;AAAA,EACpD;AAAA,EACA,CAAO,YAA4B;AACjC,UAAM,aAAa,IAAI,WAAW,mCAAS,UAAU;AACrD,UAAM,aAAY,mCAAS,eAAc,MAAM,WAAW,aAAa;AACvE,UAAM,YAAW,mCAAS,aAAY;AAEtC,UAAM,YAAY,CAAC,WAAmB,oBAA4B;AAChE,aAAO,IAAI;AAAA,QACT,mCAAmC,SAAS,oCAAoC,eAAe,8CAA8C,SAAS;AAAA,MACxJ;AAAA,IACF;AACA,QAAI,CAAC,UAAU;AACb,YAAM,UAAU,YAAY,iBAAiB;AAAA,IAC/C;AACA,QAAI,CAAC,WAAW;AACd,YAAM,UAAU,WAAW,gBAAgB;AAAA,IAC7C;AAEA,UAAM,eAAe,IAAI,SAAS;AAAA,MAChC,SAAS;AAAA,MACT;AAAA,MACA,mBAAmB,mCAAS;AAAA,IAC9B,CAAC;AACD,UAAM,WACJ,mCAAS,eAAc,QAAQ,WAAW,QAAQ,SAAS,IACvD,QAAQ,WAAW,UACnB,CAAC;AAEP,UAAM,SAAS;AAAA,MACb,aAAa,YAAY,EAAE,WAAW,SAAS,CAAC;AAAA,MAChD,GAAG,OAAO,KAAK,uBAAuB,EAAE;AAAA,QAAI,CAAC,SAC3C,YAAY,MAAM,YAAY;AAAA,MAChC;AAAA,IACF;AAEA,QAAI,mCAAS,mBAAmB;AAC9B,yCAAS,kBAAkB,QAAQ,CAAC,MAAM;AACxC,cAAM,QAAQ,OAAO,QAAQ,0BAA0B,EAAE;AAAA,UACvD,CAAC,CAAC,GAAG,KAAK,MAAM,MAAM,SAAS,EAAE;AAAA,QACnC;AACA,YAAI,CAAC,OAAO;AACV,gBAAM,IAAI,MAAM,mCAAmC,EAAE,IAAI,EAAE;AAAA,QAC7D;AACA,eAAO,KAAK,eAAe,MAAM,CAAC,GAAG,WAAW,QAAQ,CAAC;AAAA,MAC3D;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA,WAAW;AAAA,QACT,GAAG,OAAO,KAAK,yBAAyB,EAAE;AAAA,UAAI,CAAC,SAC7C,2BAA2B,MAAM,YAAY,EAAE,WAAW,SAAS,CAAC;AAAA,QACtE;AAAA,MACF;AAAA,MACA,YAAY,iBAAiB,YAAY,SAAS,WAAW,QAAQ;AAAA,IACvE;AAAA,EACF;AACF;AAEA,IAAO,cAAQ;","names":[]}