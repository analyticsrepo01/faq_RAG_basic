"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var evaluator_factory_exports = {};
__export(evaluator_factory_exports, {
  EvaluatorFactory: () => EvaluatorFactory
});
module.exports = __toCommonJS(evaluator_factory_exports);
var import_evaluator = require("@genkit-ai/ai/evaluator");
var import_core = require("@genkit-ai/core");
var import_tracing = require("@genkit-ai/core/tracing");
class EvaluatorFactory {
  constructor(auth, location, projectId) {
    this.auth = auth;
    this.location = location;
    this.projectId = projectId;
  }
  create(config, toRequest, responseHandler) {
    return (0, import_evaluator.defineEvaluator)(
      {
        name: `vertexai/${config.metric.toLocaleLowerCase()}`,
        displayName: config.displayName,
        definition: config.definition
      },
      (datapoint) => __async(this, null, function* () {
        const responseSchema = config.responseSchema;
        const response = yield this.evaluateInstances(
          toRequest(datapoint),
          responseSchema
        );
        return {
          evaluation: responseHandler(response),
          testCaseId: datapoint.testCaseId
        };
      })
    );
  }
  evaluateInstances(partialRequest, responseSchema) {
    return __async(this, null, function* () {
      const locationName = `projects/${this.projectId}/locations/${this.location}`;
      return yield (0, import_tracing.runInNewSpan)(
        {
          metadata: {
            name: "EvaluationService#evaluateInstances"
          }
        },
        (metadata, _otSpan) => __async(this, null, function* () {
          const request = __spreadValues({
            location: locationName
          }, partialRequest);
          metadata.input = request;
          const client = yield this.auth.getClient();
          const url = `https://${this.location}-aiplatform.googleapis.com/v1beta1/${locationName}:evaluateInstances`;
          const response = yield client.request({
            url,
            method: "POST",
            body: JSON.stringify(request),
            headers: {
              "X-Goog-Api-Client": import_core.GENKIT_CLIENT_HEADER
            }
          });
          metadata.output = response.data;
          try {
            return responseSchema.parse(response.data);
          } catch (e) {
            throw new Error(`Error parsing ${url} API response: ${e}`);
          }
        })
      );
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EvaluatorFactory
});
//# sourceMappingURL=evaluator_factory.js.map