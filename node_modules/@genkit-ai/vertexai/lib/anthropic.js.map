{"version":3,"sources":["../src/anthropic.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ImageBlockParam,\n  Message,\n  MessageCreateParamsBase,\n  MessageParam,\n  TextBlockParam,\n} from '@anthropic-ai/sdk/resources/messages';\nimport { AnthropicVertex } from '@anthropic-ai/vertex-sdk';\nimport {\n  CandidateData,\n  GenerateRequest,\n  GenerateResponseData,\n  GenerationCommonConfigSchema,\n  Part as GenkitPart,\n  ModelReference,\n  defineModel,\n  getBasicUsageStats,\n  modelRef,\n} from '@genkit-ai/ai/model';\nimport { GENKIT_CLIENT_HEADER } from '@genkit-ai/core';\n\nexport const claude3Sonnet = modelRef({\n  name: 'vertexai/claude-3-sonnet',\n  info: {\n    label: 'Vertex AI Model Garden - Claude 3 Sonnet',\n    versions: ['claude-3-sonnet@20240229'],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: false,\n      systemRole: true,\n      output: ['text'],\n    },\n  },\n  configSchema: GenerationCommonConfigSchema,\n});\n\nexport const claude3Haiku = modelRef({\n  name: 'vertexai/claude-3-haiku',\n  info: {\n    label: 'Vertex AI Model Garden - Claude 3 Haiku',\n    versions: ['claude-3-haiku@20240307'],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: false,\n      systemRole: true,\n      output: ['text'],\n    },\n  },\n  configSchema: GenerationCommonConfigSchema,\n});\n\nexport const claude3Opus = modelRef({\n  name: 'vertexai/claude-3-opus',\n  info: {\n    label: 'Vertex AI Model Garden - Claude 3 Opus',\n    versions: ['claude-3-opus@20240229'],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: false,\n      systemRole: true,\n      output: ['text'],\n    },\n  },\n  configSchema: GenerationCommonConfigSchema,\n});\n\nexport const SUPPORTED_ANTHROPIC_MODELS: Record<\n  string,\n  ModelReference<typeof GenerationCommonConfigSchema>\n> = {\n  'claude-3-sonnet': claude3Sonnet,\n  'claude-3-opus': claude3Opus,\n  'claude-3-haiku': claude3Haiku,\n};\n\nexport function anthropicModel(\n  modelName: string,\n  projectId: string,\n  region: string\n) {\n  const client = new AnthropicVertex({\n    region,\n    projectId,\n    defaultHeaders: {\n      'X-Goog-Api-Client': GENKIT_CLIENT_HEADER,\n    },\n  });\n  const model = SUPPORTED_ANTHROPIC_MODELS[modelName];\n  if (!model) {\n    throw new Error(`unsupported Anthropic model name ${modelName}`);\n  }\n\n  return defineModel(\n    {\n      name: model.name,\n      label: model.info?.label,\n      configSchema: GenerationCommonConfigSchema,\n      supports: model.info?.supports,\n      versions: model.info?.versions,\n    },\n    async (input, streamingCallback) => {\n      if (!streamingCallback) {\n        const response = await client.messages.create({\n          ...toAnthropicRequest(input.config?.version ?? modelName, input),\n          stream: false,\n        });\n        return fromAnthropicResponse(input, response);\n      } else {\n        const stream = await client.messages.stream(\n          toAnthropicRequest(input.config?.version ?? modelName, input)\n        );\n        for await (const event of stream) {\n          if (event.type === 'content_block_delta') {\n            streamingCallback({\n              index: 0,\n              content: [\n                {\n                  text: event.delta.text,\n                },\n              ],\n            });\n          }\n        }\n        return fromAnthropicResponse(input, await stream.finalMessage());\n      }\n    }\n  );\n}\n\nexport function toAnthropicRequest(\n  model: string,\n  input: GenerateRequest<typeof GenerationCommonConfigSchema>\n): MessageCreateParamsBase {\n  let system: string | undefined = undefined;\n  const messages: MessageParam[] = [];\n  for (const msg of input.messages) {\n    if (msg.role === 'system') {\n      system = msg.content\n        .map((c) => {\n          if (!c.text) {\n            throw new Error(\n              'Only text context is supported for system messages.'\n            );\n          }\n          return c.text;\n        })\n        .join();\n    } else {\n      messages.push({\n        role: toAnthropicRole(msg.role),\n        content: toAnthropicContent(msg.content),\n      });\n    }\n  }\n  const request = {\n    model,\n    messages,\n    // https://docs.anthropic.com/claude/docs/models-overview#model-comparison\n    max_tokens: input.config?.maxOutputTokens ?? 4096,\n  } as MessageCreateParamsBase;\n  if (system) {\n    request['system'] = system;\n  }\n  if (input.config?.stopSequences) {\n    request.stop_sequences = input.config?.stopSequences;\n  }\n  if (input.config?.temperature) {\n    request.temperature = input.config?.temperature;\n  }\n  if (input.config?.topK) {\n    request.top_k = input.config?.topK;\n  }\n  if (input.config?.topP) {\n    request.top_p = input.config?.topP;\n  }\n  return request;\n}\n\nfunction toAnthropicContent(\n  content: GenkitPart[]\n): Array<TextBlockParam | ImageBlockParam> {\n  return content.map((p) => {\n    if (p.text) {\n      return {\n        type: 'text',\n        text: p.text,\n      };\n    }\n    if (p.media) {\n      let b64Data = p.media.url;\n      if (b64Data.startsWith('data:')) {\n        b64Data = b64Data.substring(b64Data.indexOf(',')! + 1);\n      }\n\n      return {\n        type: 'image',\n        source: {\n          type: 'base64',\n          data: b64Data,\n          media_type: p.media.contentType as\n            | 'image/jpeg'\n            | 'image/png'\n            | 'image/gif'\n            | 'image/webp',\n        },\n      };\n    }\n    throw new Error(`Unsupported content type: ${p}`);\n  });\n}\n\nfunction toAnthropicRole(role): 'user' | 'assistant' {\n  if (role === 'model') {\n    return 'assistant';\n  }\n  if (role === 'user') {\n    return 'user';\n  }\n  throw new Error(`Unsupported role type ${role}`);\n}\n\nexport function fromAnthropicResponse(\n  input: GenerateRequest<typeof GenerationCommonConfigSchema>,\n  response: Message\n): GenerateResponseData {\n  const candidates: CandidateData[] = [\n    {\n      index: 0,\n      finishReason: toGenkitFinishReason(response.stop_reason),\n      custom: {\n        id: response.id,\n        model: response.model,\n        type: response.type,\n      },\n      message: {\n        role: 'model',\n        content: response.content.map((c) => ({ text: c.text })),\n      },\n    },\n  ];\n  return {\n    candidates,\n    usage: {\n      ...getBasicUsageStats(input.messages, candidates),\n      inputTokens: response.usage.input_tokens,\n      outputTokens: response.usage.output_tokens,\n    },\n  };\n}\n\nfunction toGenkitFinishReason(\n  reason: 'end_turn' | 'max_tokens' | 'stop_sequence' | null\n): CandidateData['finishReason'] {\n  switch (reason) {\n    case 'end_turn':\n      return 'stop';\n    case 'max_tokens':\n      return 'length';\n    case 'stop_sequence':\n      return 'stop';\n    case null:\n      return 'unknown';\n    default:\n      return 'other';\n  }\n}\n"],"mappings":"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","names":["_a","_b","_c"]}