{"version":3,"sources":["../src/imagen.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CandidateData,\n  defineModel,\n  GenerateRequest,\n  GenerationCommonConfigSchema,\n  getBasicUsageStats,\n  modelRef,\n} from '@genkit-ai/ai/model';\nimport { GoogleAuth } from 'google-auth-library';\nimport z from 'zod';\nimport { PluginOptions } from './index.js';\nimport { predictModel } from './predict.js';\n\nconst ImagenConfigSchema = GenerationCommonConfigSchema.extend({\n  /** Language of the prompt text. */\n  language: z\n    .enum(['auto', 'en', 'es', 'hi', 'ja', 'ko', 'pt', 'zh-TW', 'zh', 'zh-CN'])\n    .optional(),\n  /** Desired aspect ratio of output image. */\n  aspectRatio: z.enum(['1:1', '9:16', '16:9']).optional(),\n  /** A negative prompt to help generate the images. For example: \"animals\" (removes animals), \"blurry\" (makes the image clearer), \"text\" (removes text), or \"cropped\" (removes cropped images). */\n  negativePrompt: z.string().optional(),\n  /** Any non-negative integer you provide to make output images deterministic. Providing the same seed number always results in the same output images. Accepted integer values: 1 - 2147483647. */\n  seed: z.number().optional(),\n});\ntype ImagenConfig = z.infer<typeof ImagenConfigSchema>;\n\nexport const imagen2 = modelRef({\n  name: 'vertexai/imagen2',\n  info: {\n    label: 'Vertex AI - Imagen2',\n    supports: {\n      media: false,\n      multiturn: false,\n      tools: false,\n      systemRole: false,\n      output: ['media'],\n    },\n  },\n  configSchema: ImagenConfigSchema,\n});\n\nfunction extractText(request: GenerateRequest) {\n  return request.messages\n    .at(-1)!\n    .content.map((c) => c.text || '')\n    .join('');\n}\n\ninterface ImagenParameters {\n  sampleCount?: number;\n  aspectRatio?: string;\n  negativePrompt?: string;\n  seed?: number;\n  language?: string;\n}\n\nfunction toParameters(\n  request: GenerateRequest<typeof ImagenConfigSchema>\n): ImagenParameters {\n  const out = {\n    sampleCount: request.candidates ?? 1,\n    aspectRatio: request.config?.aspectRatio,\n    negativePrompt: request.config?.negativePrompt,\n    seed: request.config?.seed,\n    language: request.config?.language,\n  };\n\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n\n  return out;\n}\n\nfunction extractPromptImage(request: GenerateRequest): string | undefined {\n  return request.messages\n    .at(-1)\n    ?.content.find((p) => !!p.media)\n    ?.media?.url.split(',')[1];\n}\n\ninterface ImagenPrediction {\n  bytesBase64Encoded: string;\n  mimeType: string;\n}\n\ninterface ImagenInstance {\n  prompt: string;\n  image?: { bytesBase64Encoded: string };\n}\n\n/**\n *\n */\nexport function imagen2Model(client: GoogleAuth, options: PluginOptions) {\n  const predict = predictModel<\n    ImagenInstance,\n    ImagenPrediction,\n    ImagenParameters\n  >(client, options, 'imagegeneration@005');\n\n  return defineModel(\n    {\n      name: imagen2.name,\n      ...imagen2.info,\n      configSchema: ImagenConfigSchema,\n    },\n    async (request) => {\n      const instance: ImagenInstance = {\n        prompt: extractText(request),\n      };\n      if (extractPromptImage(request))\n        instance.image = { bytesBase64Encoded: extractPromptImage(request)! };\n\n      const req: any = {\n        instances: [instance],\n        parameters: toParameters(request),\n      };\n\n      const response = await predict([instance], toParameters(request));\n\n      const candidates: CandidateData[] = response.predictions.map((p, i) => {\n        const b64data = p.bytesBase64Encoded;\n        const mimeType = p.mimeType;\n        return {\n          index: i,\n          finishReason: 'stop',\n          message: {\n            role: 'model',\n            content: [\n              {\n                media: {\n                  url: `data:${mimeType};base64,${b64data}`,\n                  contentType: mimeType,\n                },\n              },\n            ],\n          },\n        };\n      });\n      return {\n        candidates,\n        usage: {\n          ...getBasicUsageStats(request.messages, candidates),\n          custom: { generations: candidates.length },\n        },\n        custom: response,\n      };\n    }\n  );\n}\n"],"mappings":"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","names":[]}