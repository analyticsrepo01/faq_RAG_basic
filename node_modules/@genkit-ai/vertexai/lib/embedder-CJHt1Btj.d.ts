import * as _genkit_ai_ai_embedder from '@genkit-ai/ai/embedder';
import { EmbedderReference } from '@genkit-ai/ai/embedder';
import { GoogleAuth, GoogleAuthOptions } from 'google-auth-library';
import zod__default, { z } from 'zod';
import * as _genkit_ai_ai_model from '@genkit-ai/ai/model';
import { ModelReference } from '@genkit-ai/ai/model';
import { Plugin } from '@genkit-ai/core';
import './anthropic.js';
import { VertexAIEvaluationMetric } from './evaluation.js';
import './gemini.js';

declare const imagen2: _genkit_ai_ai_model.ModelReference<zod__default.ZodObject<{
    maxOutputTokens: zod__default.ZodOptional<zod__default.ZodNumber>;
    stopSequences: zod__default.ZodOptional<zod__default.ZodArray<zod__default.ZodString, "many">>;
    temperature: zod__default.ZodOptional<zod__default.ZodNumber>;
    topK: zod__default.ZodOptional<zod__default.ZodNumber>;
    topP: zod__default.ZodOptional<zod__default.ZodNumber>;
    version: zod__default.ZodOptional<zod__default.ZodString>;
    language: zod__default.ZodOptional<zod__default.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    aspectRatio: zod__default.ZodOptional<zod__default.ZodEnum<["1:1", "9:16", "16:9"]>>;
    negativePrompt: zod__default.ZodOptional<zod__default.ZodString>;
    seed: zod__default.ZodOptional<zod__default.ZodNumber>;
}, "strip", zod__default.ZodTypeAny, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
}, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
}>>;
/**
 *
 */
declare function imagen2Model(client: GoogleAuth, options: PluginOptions): _genkit_ai_ai_model.ModelAction<zod__default.ZodObject<{
    maxOutputTokens: zod__default.ZodOptional<zod__default.ZodNumber>;
    stopSequences: zod__default.ZodOptional<zod__default.ZodArray<zod__default.ZodString, "many">>;
    temperature: zod__default.ZodOptional<zod__default.ZodNumber>;
    topK: zod__default.ZodOptional<zod__default.ZodNumber>;
    topP: zod__default.ZodOptional<zod__default.ZodNumber>;
    version: zod__default.ZodOptional<zod__default.ZodString>;
    language: zod__default.ZodOptional<zod__default.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    aspectRatio: zod__default.ZodOptional<zod__default.ZodEnum<["1:1", "9:16", "16:9"]>>;
    negativePrompt: zod__default.ZodOptional<zod__default.ZodString>;
    seed: zod__default.ZodOptional<zod__default.ZodNumber>;
}, "strip", zod__default.ZodTypeAny, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
}, {
    maxOutputTokens?: number | undefined;
    stopSequences?: string[] | undefined;
    temperature?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    version?: string | undefined;
    language?: "auto" | "en" | "es" | "hi" | "ja" | "ko" | "pt" | "zh-TW" | "zh" | "zh-CN" | undefined;
    aspectRatio?: "1:1" | "9:16" | "16:9" | undefined;
    negativePrompt?: string | undefined;
    seed?: number | undefined;
}>>;

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface PluginOptions {
    /** The Google Cloud project id to call. */
    projectId?: string;
    /** The Google Cloud region to call. */
    location: string;
    /** Provide custom authentication configuration for connecting to Vertex AI. */
    googleAuth?: GoogleAuthOptions;
    /** Configure Vertex AI evaluators */
    evaluation?: {
        metrics: VertexAIEvaluationMetric[];
    };
    modelGardenModels?: ModelReference<any>[];
}
/**
 * Add Google Cloud Vertex AI to Genkit. Includes Gemini and Imagen models and text embedder.
 */
declare const vertexAI: Plugin<[PluginOptions] | []>;

declare const TaskTypeSchema: z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>;
type TaskType = z.infer<typeof TaskTypeSchema>;
declare const TextEmbeddingGeckoConfigSchema: z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}>;
type TextEmbeddingGeckoConfig = z.infer<typeof TextEmbeddingGeckoConfigSchema>;
declare const textEmbeddingGecko003: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}>>;
declare const textEmbeddingGecko002: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}>>;
declare const textEmbeddingGecko001: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}>>;
declare const textEmbeddingGecko: EmbedderReference<z.ZodObject<{
    /**
     * The `task_type` parameter is defined as the intended downstream application to help the model
     * produce better quality embeddings.
     **/
    taskType: z.ZodOptional<z.ZodEnum<["RETRIEVAL_DOCUMENT", "RETRIEVAL_QUERY", "SEMANTIC_SIMILARITY", "CLASSIFICATION", "CLUSTERING"]>>;
    title: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}, {
    taskType?: "RETRIEVAL_DOCUMENT" | "RETRIEVAL_QUERY" | "SEMANTIC_SIMILARITY" | "CLASSIFICATION" | "CLUSTERING" | undefined;
    title?: string | undefined;
}>>;
declare const SUPPORTED_EMBEDDER_MODELS: Record<string, EmbedderReference>;
declare function textEmbeddingGeckoEmbedder(name: string, client: GoogleAuth, options: PluginOptions): _genkit_ai_ai_embedder.EmbedderAction<z.ZodTypeAny>;

export { type PluginOptions as P, SUPPORTED_EMBEDDER_MODELS as S, TaskTypeSchema as T, imagen2Model as a, type TaskType as b, TextEmbeddingGeckoConfigSchema as c, type TextEmbeddingGeckoConfig as d, textEmbeddingGecko003 as e, textEmbeddingGecko002 as f, textEmbeddingGecko001 as g, textEmbeddingGeckoEmbedder as h, imagen2 as i, textEmbeddingGecko as t, vertexAI as v };
