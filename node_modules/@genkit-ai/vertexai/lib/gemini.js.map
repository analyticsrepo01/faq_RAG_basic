{"version":3,"sources":["../src/gemini.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CandidateData,\n  defineModel,\n  GenerationCommonConfigSchema,\n  getBasicUsageStats,\n  MediaPart,\n  MessageData,\n  ModelAction,\n  ModelMiddleware,\n  modelRef,\n  ModelReference,\n  Part,\n  ToolDefinitionSchema,\n} from '@genkit-ai/ai/model';\nimport {\n  downloadRequestMedia,\n  simulateSystemPrompt,\n} from '@genkit-ai/ai/model/middleware';\nimport { GENKIT_CLIENT_HEADER } from '@genkit-ai/core';\nimport {\n  Content,\n  FunctionDeclaration,\n  FunctionDeclarationSchemaType,\n  Part as GeminiPart,\n  GenerateContentCandidate,\n  GenerateContentResponse,\n  GenerateContentResult,\n  HarmBlockThreshold,\n  HarmCategory,\n  StartChatParams,\n  VertexAI,\n} from '@google-cloud/vertexai';\nimport { z } from 'zod';\n\nconst SafetySettingsSchema = z.object({\n  category: z.nativeEnum(HarmCategory),\n  threshold: z.nativeEnum(HarmBlockThreshold),\n});\n\nconst GeminiConfigSchema = GenerationCommonConfigSchema.extend({\n  safetySettings: z.array(SafetySettingsSchema).optional(),\n});\n\nexport const geminiPro = modelRef({\n  name: 'vertexai/gemini-1.0-pro',\n  info: {\n    label: 'Vertex AI - Gemini Pro',\n    versions: ['gemini-1.0-pro', 'gemini-1.0-pro-001'],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const geminiProVision = modelRef({\n  name: 'vertexai/gemini-1.0-pro-vision',\n  info: {\n    label: 'Vertex AI - Gemini Pro Vision',\n    versions: ['gemini-1.0-pro-vision', 'gemini-1.0-pro-vision-001'],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: false,\n      systemRole: false,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15ProPreview = modelRef({\n  name: 'vertexai/gemini-1.5-pro-preview',\n  info: {\n    label: 'Vertex AI - Gemini 1.5 Pro Preview',\n    versions: ['gemini-1.5-pro-preview-0409'],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n  version: 'gemini-1.5-pro-preview-0409',\n});\n\nexport const gemini15FlashPreview = modelRef({\n  name: 'vertexai/gemini-1.5-flash-preview',\n  info: {\n    label: 'Vertex AI - Gemini 1.5 Flash',\n    versions: ['gemini-1.5-flash-preview-0514'],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      systemRole: true,\n    },\n  },\n  configSchema: GeminiConfigSchema,\n  version: 'gemini-1.5-flash-preview-0514',\n});\n\nexport const SUPPORTED_V1_MODELS = {\n  'gemini-1.0-pro': geminiPro,\n  'gemini-1.0-pro-vision': geminiProVision,\n  // 'gemini-ultra': geminiUltra,\n};\n\nexport const SUPPORTED_V15_MODELS = {\n  'gemini-1.5-pro-preview': gemini15ProPreview,\n  'gemini-1.5-flash-preview': gemini15FlashPreview,\n};\n\nexport const SUPPORTED_GEMINI_MODELS = {\n  ...SUPPORTED_V1_MODELS,\n  ...SUPPORTED_V15_MODELS,\n};\n\nfunction toGeminiRole(\n  role: MessageData['role'],\n  model?: ModelReference<z.ZodTypeAny>\n): string {\n  switch (role) {\n    case 'user':\n      return 'user';\n    case 'model':\n      return 'model';\n    case 'system':\n      if (model && SUPPORTED_V15_MODELS[model.name]) {\n        // We should have already pulled out the supported system messages,\n        // anything remaining is unsupported; throw an error.\n        throw new Error(\n          'system role is only supported for a single message in the first position'\n        );\n      } else {\n        throw new Error('system role is not supported');\n      }\n    case 'tool':\n      return 'function';\n    default:\n      return 'user';\n  }\n}\n\nconst toGeminiTool = (\n  tool: z.infer<typeof ToolDefinitionSchema>\n): FunctionDeclaration => {\n  const declaration: FunctionDeclaration = {\n    name: tool.name.replace(/\\//g, '__'), // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema),\n  };\n  return declaration;\n};\n\nconst toGeminiFileDataPart = (part: MediaPart): GeminiPart => {\n  const media = part.media;\n  if (media.url.startsWith('gs://')) {\n    if (!media.contentType)\n      throw new Error(\n        'Must supply contentType when using media from gs:// URLs.'\n      );\n    return {\n      fileData: {\n        mimeType: media.contentType,\n        fileUri: media.url,\n      },\n    };\n  } else if (media.url.startsWith('data:')) {\n    const dataUrl = media.url;\n    const b64Data = dataUrl.substring(dataUrl.indexOf(',')! + 1);\n    const contentType =\n      media.contentType ||\n      dataUrl.substring(dataUrl.indexOf(':')! + 1, dataUrl.indexOf(';'));\n    return { inlineData: { mimeType: contentType, data: b64Data } };\n  }\n\n  throw Error(\n    'Could not convert genkit part to gemini tool response part: missing file data'\n  );\n};\n\nconst toGeminiToolRequestPart = (part: Part): GeminiPart => {\n  if (!part?.toolRequest?.input) {\n    throw Error(\n      'Could not convert genkit part to gemini tool response part: missing tool request data'\n    );\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input,\n    },\n  };\n};\n\nconst toGeminiToolResponsePart = (part: Part): GeminiPart => {\n  if (!part?.toolResponse?.output) {\n    throw Error(\n      'Could not convert genkit part to gemini tool response part: missing tool response data'\n    );\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output,\n      },\n    },\n  };\n};\n\nexport function toGeminiSystemInstruction(message: MessageData): Content {\n  return {\n    role: 'user',\n    parts: message.content.map(toGeminiPart),\n  };\n}\n\nexport function toGeminiMessage(\n  message: MessageData,\n  model?: ModelReference<z.ZodTypeAny>\n): Content {\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: message.content.map(toGeminiPart),\n  };\n}\n\nfunction fromGeminiFinishReason(\n  reason: GenerateContentCandidate['finishReason']\n): CandidateData['finishReason'] {\n  if (!reason) return 'unknown';\n  switch (reason) {\n    case 'STOP':\n      return 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'SAFETY': // blocked for safety\n    case 'RECITATION': // blocked for reciting training data\n      return 'blocked';\n    default:\n      return 'unknown';\n  }\n}\n\nfunction toGeminiPart(part: Part): GeminiPart {\n  if (part.text) {\n    return { text: part.text };\n  } else if (part.media) {\n    return toGeminiFileDataPart(part);\n  } else if (part.toolRequest) {\n    return toGeminiToolRequestPart(part);\n  } else if (part.toolResponse) {\n    return toGeminiToolResponsePart(part);\n  } else {\n    throw new Error('unsupported type');\n  }\n}\n\nfunction fromGeminiInlineDataPart(part: GeminiPart): MediaPart {\n  // Check if the required properties exist\n  if (\n    !part.inlineData ||\n    !part.inlineData.hasOwnProperty('mimeType') ||\n    !part.inlineData.hasOwnProperty('data')\n  ) {\n    throw new Error('Invalid GeminiPart: missing required properties');\n  }\n  const { mimeType, data } = part.inlineData;\n  // Combine data and mimeType into a data URL\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType,\n    },\n  };\n}\n\nfunction fromGeminiFileDataPart(part: GeminiPart): MediaPart {\n  if (\n    !part.fileData ||\n    !part.fileData.hasOwnProperty('mimeType') ||\n    !part.fileData.hasOwnProperty('url')\n  ) {\n    throw new Error(\n      'Invalid Gemini File Data Part: missing required properties'\n    );\n  }\n\n  return {\n    media: {\n      url: part.fileData?.fileUri,\n      contentType: part.fileData?.mimeType,\n    },\n  };\n}\n\nfunction fromGeminiFunctionCallPart(part: GeminiPart): Part {\n  if (!part.functionCall) {\n    throw new Error(\n      'Invalid Gemini Function Call Part: missing function call data'\n    );\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n    },\n  };\n}\n\nfunction fromGeminiFunctionResponsePart(part: GeminiPart): Part {\n  if (!part.functionResponse) {\n    throw new Error(\n      'Invalid Gemini Function Call Part: missing function call data'\n    );\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, '/'), // restore slashes\n      output: part.functionResponse.response,\n    },\n  };\n}\n\n// Converts vertex part to genkit part\nfunction fromGeminiPart(part: GeminiPart): Part {\n  if (part.text !== undefined) return { text: part.text };\n  if (part.functionCall) return fromGeminiFunctionCallPart(part);\n  if (part.functionResponse) return fromGeminiFunctionResponsePart(part);\n  if (part.inlineData) return fromGeminiInlineDataPart(part);\n  if (part.fileData) return fromGeminiFileDataPart(part);\n  throw new Error(\n    'Part type is unsupported/corrupted. Either data is missing or type cannot be inferred from type.'\n  );\n}\n\nexport function fromGeminiCandidate(\n  candidate: GenerateContentCandidate\n): CandidateData {\n  const parts = candidate.content.parts || [];\n  const genkitCandidate: CandidateData = {\n    index: candidate.index || 0, // reasonable default?\n    message: {\n      role: 'model',\n      content: parts.map(fromGeminiPart),\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata,\n    },\n  };\n  return genkitCandidate;\n}\n\n// Translate JSON schema to Vertex AI's format. Specifically, the type field needs be mapped.\n// Since JSON schemas can include nested arrays/objects, we have to recursively map the type field\n// in all nested fields.\nconst convertSchemaProperty = (property) => {\n  if (!property) {\n    return null;\n  }\n  if (property.type === 'object') {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      type: FunctionDeclarationSchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required,\n    };\n  } else if (property.type === 'array') {\n    return {\n      type: FunctionDeclarationSchemaType.ARRAY,\n      items: convertSchemaProperty(property.items),\n    };\n  } else {\n    return {\n      type: FunctionDeclarationSchemaType[property.type.toUpperCase()],\n    };\n  }\n};\n\n/**\n *\n */\nexport function geminiModel(name: string, vertex: VertexAI): ModelAction {\n  const modelName = `vertexai/${name}`;\n\n  const model: ModelReference<z.ZodTypeAny> = SUPPORTED_GEMINI_MODELS[name];\n  if (!model) throw new Error(`Unsupported model: ${name}`);\n\n  const middlewares: ModelMiddleware[] = [];\n  if (SUPPORTED_V1_MODELS[name]) {\n    middlewares.push(simulateSystemPrompt());\n  }\n  if (model?.info?.supports?.media) {\n    // the gemini api doesn't support downloading media from http(s)\n    middlewares.push(downloadRequestMedia({ maxBytes: 1024 * 1024 * 20 }));\n  }\n\n  return defineModel(\n    {\n      name: modelName,\n      ...model.info,\n      configSchema: GeminiConfigSchema,\n      use: middlewares,\n    },\n    async (request, streamingCallback) => {\n      const client = vertex.preview.getGenerativeModel(\n        {\n          model: request.config?.version || model.version || name,\n        },\n        {\n          apiClient: GENKIT_CLIENT_HEADER,\n        }\n      );\n\n      // make a copy so that modifying the request will not produce side-effects\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error('No messages provided.');\n\n      // Gemini does not support messages with role system and instead expects\n      // systemInstructions to be provided as a separate input. The first\n      // message detected with role=system will be used for systemInstructions.\n      // Any additional system messages may be considered to be \"exceptional\".\n      let systemInstruction: Content | undefined = undefined;\n      if (SUPPORTED_V15_MODELS[name]) {\n        const systemMessage = messages.find((m) => m.role === 'system');\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n\n      const chatRequest: StartChatParams = {\n        systemInstruction,\n        tools: request.tools?.length\n          ? [{ functionDeclarations: request.tools?.map(toGeminiTool) }]\n          : [],\n        history: messages\n          .slice(0, -1)\n          .map((message) => toGeminiMessage(message, model)),\n        generationConfig: {\n          candidateCount: request.candidates || undefined,\n          temperature: request.config?.temperature,\n          maxOutputTokens: request.config?.maxOutputTokens,\n          topK: request.config?.topK,\n          topP: request.config?.topP,\n          stopSequences: request.config?.stopSequences,\n        },\n        safetySettings: request.config?.safetySettings,\n      };\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      if (streamingCallback) {\n        const result = await client\n          .startChat(chatRequest)\n          .sendMessageStream(msg.parts);\n        for await (const item of result.stream) {\n          (item as GenerateContentResponse).candidates?.forEach((candidate) => {\n            const c = fromGeminiCandidate(candidate);\n            streamingCallback({\n              index: c.index,\n              content: c.message.content,\n            });\n          });\n        }\n        const response = await result.response;\n        if (!response.candidates?.length) {\n          throw new Error('No valid candidates returned.');\n        }\n        return {\n          candidates: response.candidates?.map(fromGeminiCandidate) || [],\n          custom: response,\n        };\n      } else {\n        let result: GenerateContentResult | undefined;\n        try {\n          result = await client.startChat(chatRequest).sendMessage(msg.parts);\n        } catch (err) {\n          throw new Error(`Vertex response generation failed: ${err}`);\n        }\n        if (!result?.response.candidates?.length) {\n          throw new Error('No valid candidates returned.');\n        }\n        const responseCandidates =\n          result.response.candidates?.map(fromGeminiCandidate) || [];\n        return {\n          candidates: responseCandidates,\n          custom: result.response,\n          usage: getBasicUsageStats(request.messages, responseCandidates),\n        };\n      }\n    }\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAaO;AACP,wBAGO;AACP,kBAAqC;AACrC,sBAYO;AACP,iBAAkB;AAElB,MAAM,uBAAuB,aAAE,OAAO;AAAA,EACpC,UAAU,aAAE,WAAW,4BAAY;AAAA,EACnC,WAAW,aAAE,WAAW,kCAAkB;AAC5C,CAAC;AAED,MAAM,qBAAqB,0CAA6B,OAAO;AAAA,EAC7D,gBAAgB,aAAE,MAAM,oBAAoB,EAAE,SAAS;AACzD,CAAC;AAEM,MAAM,gBAAY,uBAAS;AAAA,EAChC,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU,CAAC,kBAAkB,oBAAoB;AAAA,IACjD,UAAU;AAAA,MACR,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA,IACd;AAAA,EACF;AAAA,EACA,cAAc;AAChB,CAAC;AAEM,MAAM,sBAAkB,uBAAS;AAAA,EACtC,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU,CAAC,yBAAyB,2BAA2B;AAAA,IAC/D,UAAU;AAAA,MACR,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA,IACd;AAAA,EACF;AAAA,EACA,cAAc;AAChB,CAAC;AAEM,MAAM,yBAAqB,uBAAS;AAAA,EACzC,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU,CAAC,6BAA6B;AAAA,IACxC,UAAU;AAAA,MACR,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA,IACd;AAAA,EACF;AAAA,EACA,cAAc;AAAA,EACd,SAAS;AACX,CAAC;AAEM,MAAM,2BAAuB,uBAAS;AAAA,EAC3C,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,UAAU,CAAC,+BAA+B;AAAA,IAC1C,UAAU;AAAA,MACR,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,YAAY;AAAA,IACd;AAAA,EACF;AAAA,EACA,cAAc;AAAA,EACd,SAAS;AACX,CAAC;AAEM,MAAM,sBAAsB;AAAA,EACjC,kBAAkB;AAAA,EAClB,yBAAyB;AAAA;AAE3B;AAEO,MAAM,uBAAuB;AAAA,EAClC,0BAA0B;AAAA,EAC1B,4BAA4B;AAC9B;AAEO,MAAM,0BAA0B,kCAClC,sBACA;AAGL,SAAS,aACP,MACA,OACQ;AACR,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,UAAI,SAAS,qBAAqB,MAAM,IAAI,GAAG;AAG7C,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF,OAAO;AACL,cAAM,IAAI,MAAM,8BAA8B;AAAA,MAChD;AAAA,IACF,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAEA,MAAM,eAAe,CACnB,SACwB;AACxB,QAAM,cAAmC;AAAA,IACvC,MAAM,KAAK,KAAK,QAAQ,OAAO,IAAI;AAAA;AAAA,IACnC,aAAa,KAAK;AAAA,IAClB,YAAY,sBAAsB,KAAK,WAAW;AAAA,EACpD;AACA,SAAO;AACT;AAEA,MAAM,uBAAuB,CAAC,SAAgC;AAC5D,QAAM,QAAQ,KAAK;AACnB,MAAI,MAAM,IAAI,WAAW,OAAO,GAAG;AACjC,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AACF,WAAO;AAAA,MACL,UAAU;AAAA,QACR,UAAU,MAAM;AAAA,QAChB,SAAS,MAAM;AAAA,MACjB;AAAA,IACF;AAAA,EACF,WAAW,MAAM,IAAI,WAAW,OAAO,GAAG;AACxC,UAAM,UAAU,MAAM;AACtB,UAAM,UAAU,QAAQ,UAAU,QAAQ,QAAQ,GAAG,IAAK,CAAC;AAC3D,UAAM,cACJ,MAAM,eACN,QAAQ,UAAU,QAAQ,QAAQ,GAAG,IAAK,GAAG,QAAQ,QAAQ,GAAG,CAAC;AACnE,WAAO,EAAE,YAAY,EAAE,UAAU,aAAa,MAAM,QAAQ,EAAE;AAAA,EAChE;AAEA,QAAM;AAAA,IACJ;AAAA,EACF;AACF;AAEA,MAAM,0BAA0B,CAAC,SAA2B;AAzM5D;AA0ME,MAAI,GAAC,kCAAM,gBAAN,mBAAmB,QAAO;AAC7B,UAAM;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,cAAc;AAAA,MACZ,MAAM,KAAK,YAAY;AAAA,MACvB,MAAM,KAAK,YAAY;AAAA,IACzB;AAAA,EACF;AACF;AAEA,MAAM,2BAA2B,CAAC,SAA2B;AAvN7D;AAwNE,MAAI,GAAC,kCAAM,iBAAN,mBAAoB,SAAQ;AAC/B,UAAM;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,kBAAkB;AAAA,MAChB,MAAM,KAAK,aAAa;AAAA,MACxB,UAAU;AAAA,QACR,MAAM,KAAK,aAAa;AAAA,QACxB,SAAS,KAAK,aAAa;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AACF;AAEO,SAAS,0BAA0B,SAA+B;AACvE,SAAO;AAAA,IACL,MAAM;AAAA,IACN,OAAO,QAAQ,QAAQ,IAAI,YAAY;AAAA,EACzC;AACF;AAEO,SAAS,gBACd,SACA,OACS;AACT,SAAO;AAAA,IACL,MAAM,aAAa,QAAQ,MAAM,KAAK;AAAA,IACtC,OAAO,QAAQ,QAAQ,IAAI,YAAY;AAAA,EACzC;AACF;AAEA,SAAS,uBACP,QAC+B;AAC/B,MAAI,CAAC;AAAQ,WAAO;AACpB,UAAQ,QAAQ;AAAA,IACd,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAEA,SAAS,aAAa,MAAwB;AAC5C,MAAI,KAAK,MAAM;AACb,WAAO,EAAE,MAAM,KAAK,KAAK;AAAA,EAC3B,WAAW,KAAK,OAAO;AACrB,WAAO,qBAAqB,IAAI;AAAA,EAClC,WAAW,KAAK,aAAa;AAC3B,WAAO,wBAAwB,IAAI;AAAA,EACrC,WAAW,KAAK,cAAc;AAC5B,WAAO,yBAAyB,IAAI;AAAA,EACtC,OAAO;AACL,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACpC;AACF;AAEA,SAAS,yBAAyB,MAA6B;AAE7D,MACE,CAAC,KAAK,cACN,CAAC,KAAK,WAAW,eAAe,UAAU,KAC1C,CAAC,KAAK,WAAW,eAAe,MAAM,GACtC;AACA,UAAM,IAAI,MAAM,iDAAiD;AAAA,EACnE;AACA,QAAM,EAAE,UAAU,KAAK,IAAI,KAAK;AAEhC,QAAM,UAAU,QAAQ,QAAQ,WAAW,IAAI;AAC/C,SAAO;AAAA,IACL,OAAO;AAAA,MACL,KAAK;AAAA,MACL,aAAa;AAAA,IACf;AAAA,EACF;AACF;AAEA,SAAS,uBAAuB,MAA6B;AA5S7D;AA6SE,MACE,CAAC,KAAK,YACN,CAAC,KAAK,SAAS,eAAe,UAAU,KACxC,CAAC,KAAK,SAAS,eAAe,KAAK,GACnC;AACA,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,OAAO;AAAA,MACL,MAAK,UAAK,aAAL,mBAAe;AAAA,MACpB,cAAa,UAAK,aAAL,mBAAe;AAAA,IAC9B;AAAA,EACF;AACF;AAEA,SAAS,2BAA2B,MAAwB;AAC1D,MAAI,CAAC,KAAK,cAAc;AACtB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,aAAa;AAAA,MACX,MAAM,KAAK,aAAa;AAAA,MACxB,OAAO,KAAK,aAAa;AAAA,IAC3B;AAAA,EACF;AACF;AAEA,SAAS,+BAA+B,MAAwB;AAC9D,MAAI,CAAC,KAAK,kBAAkB;AAC1B,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,cAAc;AAAA,MACZ,MAAM,KAAK,iBAAiB,KAAK,QAAQ,OAAO,GAAG;AAAA;AAAA,MACnD,QAAQ,KAAK,iBAAiB;AAAA,IAChC;AAAA,EACF;AACF;AAGA,SAAS,eAAe,MAAwB;AAC9C,MAAI,KAAK,SAAS;AAAW,WAAO,EAAE,MAAM,KAAK,KAAK;AACtD,MAAI,KAAK;AAAc,WAAO,2BAA2B,IAAI;AAC7D,MAAI,KAAK;AAAkB,WAAO,+BAA+B,IAAI;AACrE,MAAI,KAAK;AAAY,WAAO,yBAAyB,IAAI;AACzD,MAAI,KAAK;AAAU,WAAO,uBAAuB,IAAI;AACrD,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;AAEO,SAAS,oBACd,WACe;AACf,QAAM,QAAQ,UAAU,QAAQ,SAAS,CAAC;AAC1C,QAAM,kBAAiC;AAAA,IACrC,OAAO,UAAU,SAAS;AAAA;AAAA,IAC1B,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,MAAM,IAAI,cAAc;AAAA,IACnC;AAAA,IACA,cAAc,uBAAuB,UAAU,YAAY;AAAA,IAC3D,eAAe,UAAU;AAAA,IACzB,QAAQ;AAAA,MACN,eAAe,UAAU;AAAA,MACzB,kBAAkB,UAAU;AAAA,IAC9B;AAAA,EACF;AACA,SAAO;AACT;AAKA,MAAM,wBAAwB,CAAC,aAAa;AAC1C,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AACA,MAAI,SAAS,SAAS,UAAU;AAC9B,UAAM,mBAAmB,CAAC;AAC1B,WAAO,KAAK,SAAS,UAAU,EAAE,QAAQ,CAAC,QAAQ;AAChD,uBAAiB,GAAG,IAAI,sBAAsB,SAAS,WAAW,GAAG,CAAC;AAAA,IACxE,CAAC;AACD,WAAO;AAAA,MACL,MAAM,8CAA8B;AAAA,MACpC,YAAY;AAAA,MACZ,UAAU,SAAS;AAAA,IACrB;AAAA,EACF,WAAW,SAAS,SAAS,SAAS;AACpC,WAAO;AAAA,MACL,MAAM,8CAA8B;AAAA,MACpC,OAAO,sBAAsB,SAAS,KAAK;AAAA,IAC7C;AAAA,EACF,OAAO;AACL,WAAO;AAAA,MACL,MAAM,8CAA8B,SAAS,KAAK,YAAY,CAAC;AAAA,IACjE;AAAA,EACF;AACF;AAKO,SAAS,YAAY,MAAc,QAA+B;AA3ZzE;AA4ZE,QAAM,YAAY,YAAY,IAAI;AAElC,QAAM,QAAsC,wBAAwB,IAAI;AACxE,MAAI,CAAC;AAAO,UAAM,IAAI,MAAM,sBAAsB,IAAI,EAAE;AAExD,QAAM,cAAiC,CAAC;AACxC,MAAI,oBAAoB,IAAI,GAAG;AAC7B,gBAAY,SAAK,wCAAqB,CAAC;AAAA,EACzC;AACA,OAAI,0CAAO,SAAP,mBAAa,aAAb,mBAAuB,OAAO;AAEhC,gBAAY,SAAK,wCAAqB,EAAE,UAAU,OAAO,OAAO,GAAG,CAAC,CAAC;AAAA,EACvE;AAEA,aAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,OACH,MAAM,OAFX;AAAA,MAGE,cAAc;AAAA,MACd,KAAK;AAAA,IACP;AAAA,IACA,CAAO,SAAS,sBAAsB;AAjb1C,UAAAA,KAAAC,KAAA;AAkbM,YAAM,SAAS,OAAO,QAAQ;AAAA,QAC5B;AAAA,UACE,SAAOD,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,YAAW,MAAM,WAAW;AAAA,QACrD;AAAA,QACA;AAAA,UACE,WAAW;AAAA,QACb;AAAA,MACF;AAGA,YAAM,WAAW,CAAC,GAAG,QAAQ,QAAQ;AACrC,UAAI,SAAS,WAAW;AAAG,cAAM,IAAI,MAAM,uBAAuB;AAMlE,UAAI,oBAAyC;AAC7C,UAAI,qBAAqB,IAAI,GAAG;AAC9B,cAAM,gBAAgB,SAAS,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ;AAC9D,YAAI,eAAe;AACjB,mBAAS,OAAO,SAAS,QAAQ,aAAa,GAAG,CAAC;AAClD,8BAAoB,0BAA0B,aAAa;AAAA,QAC7D;AAAA,MACF;AAEA,YAAM,cAA+B;AAAA,QACnC;AAAA,QACA,SAAOC,MAAA,QAAQ,UAAR,gBAAAA,IAAe,UAClB,CAAC,EAAE,uBAAsB,aAAQ,UAAR,mBAAe,IAAI,cAAc,CAAC,IAC3D,CAAC;AAAA,QACL,SAAS,SACN,MAAM,GAAG,EAAE,EACX,IAAI,CAAC,YAAY,gBAAgB,SAAS,KAAK,CAAC;AAAA,QACnD,kBAAkB;AAAA,UAChB,gBAAgB,QAAQ,cAAc;AAAA,UACtC,cAAa,aAAQ,WAAR,mBAAgB;AAAA,UAC7B,kBAAiB,aAAQ,WAAR,mBAAgB;AAAA,UACjC,OAAM,aAAQ,WAAR,mBAAgB;AAAA,UACtB,OAAM,aAAQ,WAAR,mBAAgB;AAAA,UACtB,gBAAe,aAAQ,WAAR,mBAAgB;AAAA,QACjC;AAAA,QACA,iBAAgB,aAAQ,WAAR,mBAAgB;AAAA,MAClC;AACA,YAAM,MAAM,gBAAgB,SAAS,SAAS,SAAS,CAAC,GAAG,KAAK;AAChE,UAAI,mBAAmB;AACrB,cAAM,SAAS,MAAM,OAClB,UAAU,WAAW,EACrB,kBAAkB,IAAI,KAAK;AAC9B;AAAA,qCAAyB,OAAO,SAAhC,0EAAwC;AAA7B,kBAAM,OAAjB;AACE,aAAC,UAAiC,eAAjC,mBAA6C,QAAQ,CAAC,cAAc;AACnE,oBAAM,IAAI,oBAAoB,SAAS;AACvC,gCAAkB;AAAA,gBAChB,OAAO,EAAE;AAAA,gBACT,SAAS,EAAE,QAAQ;AAAA,cACrB,CAAC;AAAA,YACH;AAAA,UACF;AAAA,iBARA,MAneR;AAmeQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,cAAM,WAAW,MAAM,OAAO;AAC9B,YAAI,GAAC,cAAS,eAAT,mBAAqB,SAAQ;AAChC,gBAAM,IAAI,MAAM,+BAA+B;AAAA,QACjD;AACA,eAAO;AAAA,UACL,cAAY,cAAS,eAAT,mBAAqB,IAAI,yBAAwB,CAAC;AAAA,UAC9D,QAAQ;AAAA,QACV;AAAA,MACF,OAAO;AACL,YAAI;AACJ,YAAI;AACF,mBAAS,MAAM,OAAO,UAAU,WAAW,EAAE,YAAY,IAAI,KAAK;AAAA,QACpE,SAAS,KAAK;AACZ,gBAAM,IAAI,MAAM,sCAAsC,GAAG,EAAE;AAAA,QAC7D;AACA,YAAI,GAAC,sCAAQ,SAAS,eAAjB,mBAA6B,SAAQ;AACxC,gBAAM,IAAI,MAAM,+BAA+B;AAAA,QACjD;AACA,cAAM,uBACJ,YAAO,SAAS,eAAhB,mBAA4B,IAAI,yBAAwB,CAAC;AAC3D,eAAO;AAAA,UACL,YAAY;AAAA,UACZ,QAAQ,OAAO;AAAA,UACf,WAAO,iCAAmB,QAAQ,UAAU,kBAAkB;AAAA,QAChE;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":["_a","_b"]}