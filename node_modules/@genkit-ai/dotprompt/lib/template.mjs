import "./chunk-DFMI36TU.mjs";
import Handlebars from "handlebars";
const Promptbars = Handlebars.create();
function jsonHelper(serializable, options) {
  return new Promptbars.SafeString(
    JSON.stringify(serializable, null, options.hash.indent || 0)
  );
}
Promptbars.registerHelper("json", jsonHelper);
function roleHelper(role) {
  return new Promptbars.SafeString(`<<<dotprompt:role:${role}>>>`);
}
Promptbars.registerHelper("role", roleHelper);
function mediaHelper(options) {
  return new Promptbars.SafeString(
    `<<<dotprompt:media:url ${options.hash.url}${options.hash.contentType ? ` ${options.hash.contentType}` : ""}>>>`
  );
}
Promptbars.registerHelper("media", mediaHelper);
const ROLE_REGEX = /(<<<dotprompt:role:[a-z]+)>>>/g;
function toMessages(renderedString) {
  let currentMessage = {
    role: "user",
    source: ""
  };
  const messageSources = [currentMessage];
  for (const piece of renderedString.split(ROLE_REGEX).filter((s) => s.trim() !== "")) {
    if (piece.startsWith("<<<dotprompt:role:")) {
      const role = piece.substring(18);
      if (currentMessage.source) {
        currentMessage = { role, source: "" };
        messageSources.push(currentMessage);
      } else {
        currentMessage.role = role;
      }
    } else {
      currentMessage.source += piece;
    }
  }
  return messageSources.map((m) => ({
    role: m.role,
    content: toParts(m.source)
  }));
}
const PART_REGEX = /(<<<dotprompt:(?:media:url|section).*?)>>>/g;
function toParts(source) {
  const parts = [];
  const pieces = source.split(PART_REGEX).filter((s) => s.trim() !== "");
  for (let i = 0; i < pieces.length; i++) {
    const piece = pieces[i];
    if (piece.startsWith("<<<dotprompt:media:")) {
      const [_, url, contentType] = piece.split(" ");
      const part = { media: { url } };
      if (contentType)
        part.media.contentType = contentType;
      parts.push(part);
    } else if (piece.startsWith("<<<dotprompt:section")) {
      const [_, sectionType] = piece.split(" ");
      i++;
      const text = pieces[i];
      const part = { text, metadata: { purpose: sectionType } };
      parts.push(part);
    } else {
      parts.push({ text: piece });
    }
  }
  return parts;
}
function compile(source, metadata) {
  const renderString = Promptbars.compile(source, {
    knownHelpers: {
      json: true,
      section: true,
      media: true,
      role: true,
      history: true
    },
    knownHelpersOnly: true
  });
  return (input, options) => {
    const renderedString = renderString(input, {
      data: {
        metadata: { prompt: metadata, context: (options == null ? void 0 : options.context) || null }
      }
    });
    return toMessages(renderedString);
  };
}
export {
  compile
};
//# sourceMappingURL=template.mjs.map