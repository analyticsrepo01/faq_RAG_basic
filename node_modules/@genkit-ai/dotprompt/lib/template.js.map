{"version":3,"sources":["../src/template.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  MediaPart,\n  MessageData,\n  Part,\n  Role,\n  TextPart,\n} from '@genkit-ai/ai/model';\nimport { DocumentData } from '@genkit-ai/ai/retriever';\nimport Handlebars from 'handlebars';\nimport { PromptMetadata } from './metadata.js';\n\nconst Promptbars = Handlebars.create();\n\nfunction jsonHelper(serializable: any, options: { hash: { indent?: number } }) {\n  return new Promptbars.SafeString(\n    JSON.stringify(serializable, null, options.hash.indent || 0)\n  );\n}\nPromptbars.registerHelper('json', jsonHelper);\n\nfunction roleHelper(role: string) {\n  return new Promptbars.SafeString(`<<<dotprompt:role:${role}>>>`);\n}\nPromptbars.registerHelper('role', roleHelper);\n\nfunction mediaHelper(options: Handlebars.HelperOptions) {\n  return new Promptbars.SafeString(\n    `<<<dotprompt:media:url ${options.hash.url}${\n      options.hash.contentType ? ` ${options.hash.contentType}` : ''\n    }>>>`\n  );\n}\nPromptbars.registerHelper('media', mediaHelper);\n\nconst ROLE_REGEX = /(<<<dotprompt:role:[a-z]+)>>>/g;\n\nfunction toMessages(renderedString: string): MessageData[] {\n  let currentMessage: { role: string; source: string } = {\n    role: 'user',\n    source: '',\n  };\n  const messageSources: { role: string; source: string }[] = [currentMessage];\n\n  for (const piece of renderedString\n    .split(ROLE_REGEX)\n    .filter((s) => s.trim() !== '')) {\n    if (piece.startsWith('<<<dotprompt:role:')) {\n      const role = piece.substring(18);\n      if (currentMessage.source) {\n        currentMessage = { role, source: '' };\n        messageSources.push(currentMessage);\n      } else {\n        currentMessage.role = role;\n      }\n    } else {\n      currentMessage.source += piece;\n    }\n  }\n\n  return messageSources.map((m) => ({\n    role: m.role as Role,\n    content: toParts(m.source),\n  }));\n}\n\nconst PART_REGEX = /(<<<dotprompt:(?:media:url|section).*?)>>>/g;\n\nfunction toParts(source: string): Part[] {\n  const parts: Part[] = [];\n  const pieces = source.split(PART_REGEX).filter((s) => s.trim() !== '');\n  for (let i = 0; i < pieces.length; i++) {\n    const piece = pieces[i];\n    if (piece.startsWith('<<<dotprompt:media:')) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const [_, url, contentType] = piece.split(' ');\n      const part: MediaPart = { media: { url } };\n      if (contentType) part.media.contentType = contentType;\n      parts.push(part);\n    } else if (piece.startsWith('<<<dotprompt:section')) {\n      const [_, sectionType] = piece.split(' ');\n      i++;\n      const text = pieces[i];\n      const part: TextPart = { text, metadata: { purpose: sectionType } };\n      parts.push(part);\n    } else {\n      parts.push({ text: piece });\n    }\n  }\n\n  return parts;\n}\n\nexport function compile<Variables = any>(\n  source: string,\n  metadata: PromptMetadata\n) {\n  const renderString = Promptbars.compile<Variables>(source, {\n    knownHelpers: {\n      json: true,\n      section: true,\n      media: true,\n      role: true,\n      history: true,\n    },\n    knownHelpersOnly: true,\n  });\n\n  return (\n    input: Variables,\n    options?: { context?: DocumentData[]; history?: MessageData[] }\n  ) => {\n    const renderedString = renderString(input, {\n      data: {\n        metadata: { prompt: metadata, context: options?.context || null },\n      },\n    });\n    return toMessages(renderedString);\n  };\n}\n"],"mappings":"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","names":["Handlebars"]}