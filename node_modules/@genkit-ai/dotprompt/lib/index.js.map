{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  genkitPlugin,\n  InitializedPlugin,\n  PluginProvider,\n} from '@genkit-ai/core';\n\nimport { readFileSync } from 'fs';\nimport { basename } from 'path';\nimport { defineDotprompt, Dotprompt } from './prompt.js';\nimport { loadPromptFolder, lookupPrompt } from './registry.js';\n\nexport { defineDotprompt, Dotprompt };\n\nexport interface DotpromptPluginOptions {\n  // Directory to look for .prompt files.\n  //\n  // Note: This directory will be searched recursively, and any sub-directory\n  // paths will be included in the prompt name. E.g. - if a prompt file is\n  // located at `<dir>/foo/bar.prompt`, the prompt name will be `foo-bar`.\n  dir: string;\n}\n\nexport function dotprompt<IP extends InitializedPlugin>(\n  params: DotpromptPluginOptions = { dir: './prompts' }\n): PluginProvider {\n  const plugin = genkitPlugin(\n    'dotprompt',\n    async (options: DotpromptPluginOptions): Promise<IP> => {\n      return loadPromptFolder(options.dir).then((unused) => ({}) as IP);\n    }\n  );\n  return plugin(params);\n}\n\nexport async function prompt<Variables = unknown>(\n  name: string,\n  options?: { variant?: string }\n): Promise<Dotprompt<Variables>> {\n  return (await lookupPrompt(name, options?.variant)) as Dotprompt<Variables>;\n}\n\nexport function loadPromptFile(path: string): Dotprompt {\n  return Dotprompt.parse(\n    basename(path).split('.')[0],\n    readFileSync(path, 'utf-8')\n  );\n}\n\nexport async function loadPromptUrl(\n  name: string,\n  url: string\n): Promise<Dotprompt> {\n  const fetch = (await import('node-fetch')).default;\n  const response = await fetch(url);\n  const text = await response.text();\n  return Dotprompt.parse(name, text);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAIO;AAEP,gBAA6B;AAC7B,kBAAyB;AACzB,oBAA2C;AAC3C,sBAA+C;AAaxC,SAAS,UACd,SAAiC,EAAE,KAAK,YAAY,GACpC;AAChB,QAAM,aAAS;AAAA,IACb;AAAA,IACA,CAAO,YAAiD;AACtD,iBAAO,kCAAiB,QAAQ,GAAG,EAAE,KAAK,CAAC,YAAY,CAAC,EAAQ;AAAA,IAClE;AAAA,EACF;AACA,SAAO,OAAO,MAAM;AACtB;AAEA,SAAsB,OACpB,MACA,SAC+B;AAAA;AAC/B,WAAQ,UAAM,8BAAa,MAAM,mCAAS,OAAO;AAAA,EACnD;AAAA;AAEO,SAAS,eAAe,MAAyB;AACtD,SAAO,wBAAU;AAAA,QACf,sBAAS,IAAI,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,QAC3B,wBAAa,MAAM,OAAO;AAAA,EAC5B;AACF;AAEA,SAAsB,cACpB,MACA,KACoB;AAAA;AACpB,UAAM,SAAS,MAAM,OAAO,YAAY,GAAG;AAC3C,UAAM,WAAW,MAAM,MAAM,GAAG;AAChC,UAAM,OAAO,MAAM,SAAS,KAAK;AACjC,WAAO,wBAAU,MAAM,MAAM,IAAI;AAAA,EACnC;AAAA;","names":[]}