import {
  __spreadProps,
  __spreadValues
} from "./chunk-DFMI36TU.mjs";
const JSON_SCHEMA_SCALAR_TYPES = [
  "string",
  "boolean",
  "null",
  "number",
  "integer"
];
function picoschema(schema) {
  if (!schema)
    return null;
  if ([...JSON_SCHEMA_SCALAR_TYPES, "object", "array"].includes(
    schema == null ? void 0 : schema.type
  )) {
    return schema;
  }
  if (typeof (schema == null ? void 0 : schema.properties) === "object") {
    return __spreadProps(__spreadValues({}, schema), { type: "object" });
  }
  return parsePico(schema);
}
function extractDescription(input) {
  if (!input.includes(","))
    return [input, null];
  const match = input.match(/(.*?), *(.*)$/);
  return [match[1], match[2]];
}
function parsePico(obj, path = []) {
  if (typeof obj === "string") {
    const [type, description] = extractDescription(obj);
    if (!JSON_SCHEMA_SCALAR_TYPES.includes(type)) {
      throw new Error(`Picoschema: Unsupported scalar type '${type}'.`);
    }
    return description ? { type, description } : { type };
  } else if (typeof obj !== "object") {
    throw new Error(
      "Picoschema: only consists of objects and strings. Got: " + JSON.stringify(obj)
    );
  }
  const schema = {
    type: "object",
    properties: {},
    required: [],
    additionalProperties: false
  };
  for (const key in obj) {
    const [name, typeInfo] = key.split("(");
    const isOptional = name.endsWith("?");
    const propertyName = isOptional ? name.slice(0, -1) : name;
    if (!isOptional) {
      schema.required.push(propertyName);
    }
    if (!typeInfo) {
      schema.properties[propertyName] = parsePico(obj[key], [...path, key]);
      continue;
    }
    const [type, description] = extractDescription(
      typeInfo.substring(0, typeInfo.length - 1)
    );
    if (type === "array") {
      schema.properties[propertyName] = {
        type: "array",
        items: parsePico(obj[key], [...path, key])
      };
    } else if (type === "object") {
      schema.properties[propertyName] = parsePico(obj[key], [...path, key]);
    } else if (type === "enum") {
      schema.properties[propertyName] = { enum: obj[key] };
    } else {
      throw new Error(
        "Picoschema: parenthetical types must be 'object' or 'array', got: " + type
      );
    }
    if (description) {
      schema.properties[propertyName].description = description;
    }
  }
  if (!schema.required.length)
    delete schema.required;
  return schema;
}
export {
  picoschema
};
//# sourceMappingURL=picoschema.mjs.map