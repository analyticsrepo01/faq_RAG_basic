"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var src_exports = {};
__export(src_exports, {
  Dotprompt: () => import_prompt.Dotprompt,
  defineDotprompt: () => import_prompt.defineDotprompt,
  dotprompt: () => dotprompt,
  loadPromptFile: () => loadPromptFile,
  loadPromptUrl: () => loadPromptUrl,
  prompt: () => prompt
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@genkit-ai/core");
var import_fs = require("fs");
var import_path = require("path");
var import_prompt = require("./prompt.js");
var import_registry = require("./registry.js");
function dotprompt(params = { dir: "./prompts" }) {
  const plugin = (0, import_core.genkitPlugin)(
    "dotprompt",
    (options) => __async(this, null, function* () {
      return (0, import_registry.loadPromptFolder)(options.dir).then((unused) => ({}));
    })
  );
  return plugin(params);
}
function prompt(name, options) {
  return __async(this, null, function* () {
    return yield (0, import_registry.lookupPrompt)(name, options == null ? void 0 : options.variant);
  });
}
function loadPromptFile(path) {
  return import_prompt.Dotprompt.parse(
    (0, import_path.basename)(path).split(".")[0],
    (0, import_fs.readFileSync)(path, "utf-8")
  );
}
function loadPromptUrl(name, url) {
  return __async(this, null, function* () {
    const fetch = (yield import("node-fetch")).default;
    const response = yield fetch(url);
    const text = yield response.text();
    return import_prompt.Dotprompt.parse(name, text);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Dotprompt,
  defineDotprompt,
  dotprompt,
  loadPromptFile,
  loadPromptUrl,
  prompt
});
//# sourceMappingURL=index.js.map