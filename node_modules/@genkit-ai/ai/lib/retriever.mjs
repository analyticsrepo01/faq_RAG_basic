import {
  __async,
  __spreadValues
} from "./chunk-7OAPEGJQ.mjs";
import { GenkitError, defineAction } from "@genkit-ai/core";
import { lookupAction } from "@genkit-ai/core/registry";
import * as z from "zod";
import { Document, DocumentDataSchema } from "./document.js";
import {
  Document as Document2,
  DocumentDataSchema as DocumentDataSchema2
} from "./document.js";
const RetrieverRequestSchema = z.object({
  query: DocumentDataSchema,
  options: z.any().optional()
});
const RetrieverResponseSchema = z.object({
  documents: z.array(DocumentDataSchema)
  // TODO: stats, etc.
});
const IndexerRequestSchema = z.object({
  documents: z.array(DocumentDataSchema),
  options: z.any().optional()
});
const RetrieverInfoSchema = z.object({
  label: z.string().optional(),
  /** Supported model capabilities. */
  supports: z.object({
    /** Model can process media as part of the prompt (multimodal input). */
    media: z.boolean().optional()
  }).optional()
});
function retrieverWithMetadata(retriever, configSchema) {
  const withMeta = retriever;
  withMeta.__configSchema = configSchema;
  return withMeta;
}
function indexerWithMetadata(indexer, configSchema) {
  const withMeta = indexer;
  withMeta.__configSchema = configSchema;
  return withMeta;
}
function defineRetriever(options, runner) {
  const retriever = defineAction(
    {
      actionType: "retriever",
      name: options.name,
      inputSchema: options.configSchema ? RetrieverRequestSchema.extend({
        options: options.configSchema.optional()
      }) : RetrieverRequestSchema,
      outputSchema: RetrieverResponseSchema,
      metadata: {
        type: "retriever",
        info: options.info
      }
    },
    (i) => runner(new Document(i.query), i.options)
  );
  const rwm = retrieverWithMetadata(
    retriever,
    options.configSchema
  );
  return rwm;
}
function defineIndexer(options, runner) {
  const indexer = defineAction(
    {
      actionType: "indexer",
      name: options.name,
      inputSchema: options.configSchema ? IndexerRequestSchema.extend({
        options: options.configSchema.optional()
      }) : IndexerRequestSchema,
      outputSchema: z.void(),
      metadata: {
        type: "indexer",
        embedderInfo: options.embedderInfo
      }
    },
    (i) => runner(
      i.documents.map((dd) => new Document(dd)),
      i.options
    )
  );
  const iwm = indexerWithMetadata(
    indexer,
    options.configSchema
  );
  return iwm;
}
function retrieve(params) {
  return __async(this, null, function* () {
    let retriever;
    if (typeof params.retriever === "string") {
      retriever = yield lookupAction(`/retriever/${params.retriever}`);
    } else if (Object.hasOwnProperty.call(params.retriever, "info")) {
      retriever = yield lookupAction(`/retriever/${params.retriever.name}`);
    } else {
      retriever = params.retriever;
    }
    if (!retriever) {
      throw new Error("Unable to resolve the retriever");
    }
    const response = yield retriever({
      query: typeof params.query === "string" ? Document.fromText(params.query) : params.query,
      options: params.options
    });
    return response.documents.map((d) => new Document(d));
  });
}
function index(params) {
  return __async(this, null, function* () {
    let indexer;
    if (typeof params.indexer === "string") {
      indexer = yield lookupAction(`/indexer/${params.indexer}`);
    } else if (Object.hasOwnProperty.call(params.indexer, "info")) {
      indexer = yield lookupAction(`/indexer/${params.indexer.name}`);
    } else {
      indexer = params.indexer;
    }
    if (!indexer) {
      throw new Error("Unable to utilize the provided indexer");
    }
    return yield indexer({
      documents: params.documents,
      options: params.options
    });
  });
}
const CommonRetrieverOptionsSchema = z.object({
  k: z.number().describe("Number of documents to retrieve").optional()
});
function retrieverRef(options) {
  return __spreadValues({}, options);
}
const IndexerInfoSchema = RetrieverInfoSchema;
function indexerRef(options) {
  return __spreadValues({}, options);
}
function itemToDocument(item, options) {
  if (!item)
    throw new GenkitError({
      status: "INVALID_ARGUMENT",
      message: `Items returned from simple retriever must be non-null.`
    });
  if (typeof item === "string")
    return Document.fromText(item);
  if (typeof options.content === "function") {
    const transformed = options.content(item);
    return typeof transformed === "string" ? Document.fromText(transformed) : new Document({ content: transformed });
  }
  if (typeof options.content === "string" && typeof item === "object")
    return Document.fromText(item[options.content]);
  throw new GenkitError({
    status: "INVALID_ARGUMENT",
    message: `Cannot convert item to document without content option. Item: ${JSON.stringify(item)}`
  });
}
function itemToMetadata(item, options) {
  if (typeof item === "string")
    return void 0;
  if (Array.isArray(options.metadata) && typeof item === "object") {
    const out = {};
    options.metadata.forEach((key) => out[key] = item[key]);
  }
  if (typeof options.metadata === "function")
    return options.metadata(item);
  if (!options.metadata && typeof item === "object") {
    const out = __spreadValues({}, item);
    if (typeof options.content === "string")
      delete out[options.content];
    return out;
  }
  throw new GenkitError({
    status: "INVALID_ARGUMENT",
    message: `Unable to extract metadata from item with supplied options. Item: ${JSON.stringify(item)}`
  });
}
function defineSimpleRetriever(options, handler) {
  return defineRetriever(
    {
      name: options.name,
      configSchema: options.configSchema
    },
    (query, config) => __async(this, null, function* () {
      const result = yield handler(query, config);
      return {
        documents: result.map((item) => {
          const doc = itemToDocument(item, options);
          if (typeof item !== "string")
            doc.metadata = itemToMetadata(item, options);
          return doc;
        })
      };
    })
  );
}
export {
  CommonRetrieverOptionsSchema,
  Document2 as Document,
  DocumentDataSchema2 as DocumentDataSchema,
  IndexerInfoSchema,
  RetrieverInfoSchema,
  defineIndexer,
  defineRetriever,
  defineSimpleRetriever,
  index,
  indexerRef,
  retrieve,
  retrieverRef
};
//# sourceMappingURL=retriever.mjs.map