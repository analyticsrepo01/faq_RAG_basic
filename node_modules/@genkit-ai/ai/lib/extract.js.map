{"version":3,"sources":["../src/extract.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport JSON5 from 'json5';\n\n/**\n * Extracts JSON from string with lenient parsing rules to improve likelihood of successful extraction.\n */\nexport function extractJson<T = unknown>(text: string): T | null {\n  let openingChar: '{' | '[' | undefined;\n  let closingChar: '}' | ']' | undefined;\n  let startPos: number | undefined;\n  let nestingCount = 0;\n\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i].replace(/\\u00A0/g, ' ');\n\n    if (!openingChar && (char === '{' || char === '[')) {\n      // Look for opening character\n      openingChar = char;\n      closingChar = char === '{' ? '}' : ']';\n      startPos = i;\n      nestingCount++;\n    } else if (char === openingChar) {\n      // Increment nesting for matching opening character\n      nestingCount++;\n    } else if (char === closingChar) {\n      // Decrement nesting for matching closing character\n      nestingCount--;\n      if (!nestingCount) {\n        // Reached end of target element\n        return JSON5.parse(text.substring(startPos || 0, i + 1)) as T;\n      }\n    }\n  }\n\n  if (startPos !== undefined && nestingCount > 0) {\n    try {\n      return JSON5.parse(text.substring(startPos) + (closingChar || '')) as T;\n    } catch (e) {\n      throw new Error(`Invalid JSON extracted from model output: ${text}`);\n    }\n  }\n  throw new Error(`No JSON object or array found in model output: ${text}`);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,mBAAkB;AAKX,SAAS,YAAyB,MAAwB;AAC/D,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI,eAAe;AAEnB,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAM,OAAO,KAAK,CAAC,EAAE,QAAQ,WAAW,GAAG;AAE3C,QAAI,CAAC,gBAAgB,SAAS,OAAO,SAAS,MAAM;AAElD,oBAAc;AACd,oBAAc,SAAS,MAAM,MAAM;AACnC,iBAAW;AACX;AAAA,IACF,WAAW,SAAS,aAAa;AAE/B;AAAA,IACF,WAAW,SAAS,aAAa;AAE/B;AACA,UAAI,CAAC,cAAc;AAEjB,eAAO,aAAAA,QAAM,MAAM,KAAK,UAAU,YAAY,GAAG,IAAI,CAAC,CAAC;AAAA,MACzD;AAAA,IACF;AAAA,EACF;AAEA,MAAI,aAAa,UAAa,eAAe,GAAG;AAC9C,QAAI;AACF,aAAO,aAAAA,QAAM,MAAM,KAAK,UAAU,QAAQ,KAAK,eAAe,GAAG;AAAA,IACnE,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,6CAA6C,IAAI,EAAE;AAAA,IACrE;AAAA,EACF;AACA,QAAM,IAAI,MAAM,kDAAkD,IAAI,EAAE;AAC1E;","names":["JSON5"]}