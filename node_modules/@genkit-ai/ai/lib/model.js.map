{"version":3,"sources":["../src/model.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Action,\n  defineAction,\n  getStreamingCallback,\n  Middleware,\n  StreamingCallback,\n} from '@genkit-ai/core';\nimport { toJsonSchema } from '@genkit-ai/core/schema';\nimport { performance } from 'node:perf_hooks';\nimport { z } from 'zod';\nimport { DocumentDataSchema } from './document.js';\nimport {\n  augmentWithContext,\n  conformOutput,\n  validateSupport,\n} from './model/middleware.js';\nimport * as telemetry from './telemetry.js';\n\n//\n// IMPORTANT: Please keep type definitions in sync with\n//   genkit-tools/src/types/model.ts\n//\n\nconst EmptyPartSchema = z.object({\n  text: z.never().optional(),\n  media: z.never().optional(),\n  toolRequest: z.never().optional(),\n  toolResponse: z.never().optional(),\n  data: z.unknown().optional(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport const TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the message. */\n  text: z.string(),\n});\nexport type TextPart = z.infer<typeof TextPartSchema>;\n\nexport const MediaPartSchema = EmptyPartSchema.extend({\n  media: z.object({\n    /** The media content type. Inferred from data uri if not provided. */\n    contentType: z.string().optional(),\n    /** A `data:` or `https:` uri containing the media content.  */\n    url: z.string(),\n  }),\n});\nexport type MediaPart = z.infer<typeof MediaPartSchema>;\n\nexport const ToolRequestPartSchema = EmptyPartSchema.extend({\n  /** A request for a tool to be executed, usually provided by a model. */\n  toolRequest: z.object({\n    /** The call id or reference for a specific request. */\n    ref: z.string().optional(),\n    /** The name of the tool to call. */\n    name: z.string(),\n    /** The input parameters for the tool, usually a JSON object. */\n    input: z.unknown().optional(),\n  }),\n});\nexport type ToolRequestPart = z.infer<typeof ToolRequestPartSchema>;\n\nexport const ToolResponsePartSchema = EmptyPartSchema.extend({\n  /** A provided response to a tool call. */\n  toolResponse: z.object({\n    /** The call id or reference for a specific request. */\n    ref: z.string().optional(),\n    /** The name of the tool. */\n    name: z.string(),\n    /** The output data returned from the tool, usually a JSON object. */\n    output: z.unknown().optional(),\n  }),\n});\nexport type ToolResponsePart = z.infer<typeof ToolResponsePartSchema>;\n\nexport const DataPartSchema = EmptyPartSchema.extend({\n  data: z.unknown(),\n});\n\nexport type DataPart = z.infer<typeof DataPartSchema>;\n\nexport const PartSchema = z.union([\n  TextPartSchema,\n  MediaPartSchema,\n  ToolRequestPartSchema,\n  ToolResponsePartSchema,\n  DataPartSchema,\n]);\nexport type Part = z.infer<typeof PartSchema>;\n\nexport const RoleSchema = z.enum(['system', 'user', 'model', 'tool']);\nexport type Role = z.infer<typeof RoleSchema>;\n\nexport const MessageSchema = z.object({\n  role: RoleSchema,\n  content: z.array(PartSchema),\n});\nexport type MessageData = z.infer<typeof MessageSchema>;\n\nconst OutputFormatSchema = z.enum(['json', 'text', 'media']);\n\nexport const ModelInfoSchema = z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: z.array(z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: z.string().optional(),\n  /** Supported model capabilities. */\n  supports: z\n    .object({\n      /** Model can process historical messages passed with a prompt. */\n      multiturn: z.boolean().optional(),\n      /** Model can process media as part of the prompt (multimodal input). */\n      media: z.boolean().optional(),\n      /** Model can perform tool calls. */\n      tools: z.boolean().optional(),\n      /** Model can accept messages with role \"system\". */\n      systemRole: z.boolean().optional(),\n      /** Model can output this type of data. */\n      output: z.array(OutputFormatSchema).optional(),\n      /** Model can natively support document-based context grounding. */\n      context: z.boolean().optional(),\n    })\n    .optional(),\n});\nexport type ModelInfo = z.infer<typeof ModelInfoSchema>;\n\nexport const ToolDefinitionSchema = z.object({\n  name: z.string(),\n  description: z.string(),\n  inputSchema: z\n    .record(z.any())\n    .describe('Valid JSON Schema representing the input of the tool.'),\n  outputSchema: z\n    .record(z.any())\n    .describe('Valid JSON Schema describing the output of the tool.')\n    .optional(),\n});\nexport type ToolDefinition = z.infer<typeof ToolDefinitionSchema>;\n\nexport const GenerationCommonConfigSchema = z.object({\n  /** A specific version of a model family, e.g. `gemini-1.0-pro-001` for the `gemini-1.0-pro` family. */\n  version: z.string().optional(),\n  temperature: z.number().optional(),\n  maxOutputTokens: z.number().optional(),\n  topK: z.number().optional(),\n  topP: z.number().optional(),\n  stopSequences: z.array(z.string()).optional(),\n});\n\nconst OutputConfigSchema = z.object({\n  format: OutputFormatSchema.optional(),\n  schema: z.record(z.any()).optional(),\n});\nexport type OutputConfig = z.infer<typeof OutputConfigSchema>;\n\nexport const GenerateRequestSchema = z.object({\n  messages: z.array(MessageSchema),\n  config: z.any().optional(),\n  tools: z.array(ToolDefinitionSchema).optional(),\n  output: OutputConfigSchema.optional(),\n  context: z.array(DocumentDataSchema).optional(),\n  candidates: z.number().optional(),\n});\n\nexport interface GenerateRequest<\n  CustomOptionsSchema extends z.ZodTypeAny = z.ZodTypeAny,\n> extends z.infer<typeof GenerateRequestSchema> {\n  config?: z.infer<CustomOptionsSchema>;\n}\n\nexport const GenerationUsageSchema = z.object({\n  inputTokens: z.number().optional(),\n  outputTokens: z.number().optional(),\n  totalTokens: z.number().optional(),\n  inputCharacters: z.number().optional(),\n  outputCharacters: z.number().optional(),\n  inputImages: z.number().optional(),\n  outputImages: z.number().optional(),\n  custom: z.record(z.number()).optional(),\n});\nexport type GenerationUsage = z.infer<typeof GenerationUsageSchema>;\n\nexport const CandidateSchema = z.object({\n  index: z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: z.enum(['stop', 'length', 'blocked', 'other', 'unknown']),\n  finishMessage: z.string().optional(),\n  custom: z.unknown(),\n});\nexport type CandidateData = z.infer<typeof CandidateSchema>;\n\nexport const CandidateErrorSchema = z.object({\n  index: z.number(),\n  code: z.enum(['blocked', 'other', 'unknown']),\n  message: z.string().optional(),\n});\nexport type CandidateError = z.infer<typeof CandidateErrorSchema>;\n\nexport const GenerateResponseSchema = z.object({\n  candidates: z.array(CandidateSchema),\n  latencyMs: z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  custom: z.unknown(),\n  request: GenerateRequestSchema.optional(),\n});\nexport type GenerateResponseData = z.infer<typeof GenerateResponseSchema>;\n\nexport const GenerateResponseChunkSchema = z.object({\n  /** The index of the candidate this chunk belongs to. */\n  index: z.number(),\n  /** The chunk of content to stream right now. */\n  content: z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: z.unknown().optional(),\n});\nexport type GenerateResponseChunkData = z.infer<\n  typeof GenerateResponseChunkSchema\n>;\n\nexport type ModelAction<\n  CustomOptionsSchema extends z.ZodTypeAny = z.ZodTypeAny,\n> = Action<\n  typeof GenerateRequestSchema,\n  typeof GenerateResponseSchema,\n  { model: ModelInfo }\n> & {\n  __configSchema: CustomOptionsSchema;\n};\n\nexport type ModelMiddleware = Middleware<\n  z.infer<typeof GenerateRequestSchema>,\n  z.infer<typeof GenerateResponseSchema>\n>;\n\n/**\n * Defines a new model and adds it to the registry.\n */\nexport function defineModel<\n  CustomOptionsSchema extends z.ZodTypeAny = z.ZodTypeAny,\n>(\n  options: {\n    name: string;\n    /** Known version names for this model, e.g. `gemini-1.0-pro-001`. */\n    versions?: string[];\n    /** Capabilities this model supports. */\n    supports?: ModelInfo['supports'];\n    /** Custom options schema for this model. */\n    configSchema?: CustomOptionsSchema;\n    /** Descriptive name for this model e.g. 'Google AI - Gemini Pro'. */\n    label?: string;\n    use?: ModelMiddleware[];\n  },\n  runner: (\n    request: GenerateRequest<CustomOptionsSchema>,\n    streamingCallback?: StreamingCallback<GenerateResponseChunkData>\n  ) => Promise<GenerateResponseData>\n): ModelAction<CustomOptionsSchema> {\n  const label = options.label || `${options.name} GenAI model`;\n  const middleware: ModelMiddleware[] = [\n    ...(options.use || []),\n    validateSupport(options),\n  ];\n  if (!options?.supports?.context) middleware.push(augmentWithContext());\n  middleware.push(conformOutput());\n  const act = defineAction(\n    {\n      actionType: 'model',\n      name: options.name,\n      description: label,\n      inputSchema: GenerateRequestSchema,\n      outputSchema: GenerateResponseSchema,\n      metadata: {\n        model: {\n          label,\n          customOptions: options.configSchema\n            ? toJsonSchema({ schema: options.configSchema })\n            : undefined,\n          versions: options.versions,\n          supports: options.supports,\n        },\n      },\n      use: middleware,\n    },\n    (input) => {\n      const startTimeMs = performance.now();\n      return runner(input, getStreamingCallback())\n        .then((response) => {\n          const timedResponse = {\n            ...response,\n            latencyMs: performance.now() - startTimeMs,\n          };\n          telemetry.recordGenerateActionMetrics(options.name, input, {\n            response: timedResponse,\n          });\n          return timedResponse;\n        })\n        .catch((err) => {\n          telemetry.recordGenerateActionMetrics(options.name, input, { err });\n          throw err;\n        });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || z.unknown(),\n  });\n  return act as ModelAction<CustomOptionsSchema>;\n}\n\nexport interface ModelReference<CustomOptions extends z.ZodTypeAny> {\n  name: string;\n  configSchema?: CustomOptions;\n  info?: ModelInfo;\n  version?: string;\n}\n\n/**\n *\n */\nexport function modelRef<\n  CustomOptionsSchema extends z.ZodTypeAny = z.ZodTypeAny,\n>(\n  options: ModelReference<CustomOptionsSchema>\n): ModelReference<CustomOptionsSchema> {\n  return { ...options };\n}\n\n/** Container for counting usage stats for a single input/output {Part} */\ntype PartCounts = {\n  characters: number;\n  images: number;\n};\n\n/**\n * Calculates basic usage statistics from the given model inputs and outputs.\n */\nexport function getBasicUsageStats(\n  input: MessageData[],\n  candidates: CandidateData[]\n): GenerationUsage {\n  const responseCandidateParts = candidates.flatMap(\n    (candidate) => candidate.message.content\n  );\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    candidates.flatMap((c) => c.message.content)\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n  };\n}\n\nfunction getPartCounts(parts: Part[]): PartCounts {\n  return parts.reduce(\n    (counts, part) => {\n      return {\n        characters: counts.characters + (part.text?.length || 0),\n        images: counts.images + (part.media ? 1 : 0),\n      };\n    },\n    { characters: 0, images: 0 }\n  );\n}\n\nexport type ModelArgument<\n  CustomOptions extends z.ZodTypeAny = typeof GenerationCommonConfigSchema,\n> = ModelAction<CustomOptions> | ModelReference<CustomOptions> | string;\n"],"mappings":"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","names":[]}