import {
  __spreadProps,
  __spreadValues
} from "./chunk-7OAPEGJQ.mjs";
import {
  defineAction,
  getStreamingCallback
} from "@genkit-ai/core";
import { toJsonSchema } from "@genkit-ai/core/schema";
import { performance } from "node:perf_hooks";
import { z } from "zod";
import { DocumentDataSchema } from "./document.js";
import {
  augmentWithContext,
  conformOutput,
  validateSupport
} from "./model/middleware.js";
import * as telemetry from "./telemetry.js";
const EmptyPartSchema = z.object({
  text: z.never().optional(),
  media: z.never().optional(),
  toolRequest: z.never().optional(),
  toolResponse: z.never().optional(),
  data: z.unknown().optional(),
  metadata: z.record(z.unknown()).optional()
});
const TextPartSchema = EmptyPartSchema.extend({
  /** The text of the message. */
  text: z.string()
});
const MediaPartSchema = EmptyPartSchema.extend({
  media: z.object({
    /** The media content type. Inferred from data uri if not provided. */
    contentType: z.string().optional(),
    /** A `data:` or `https:` uri containing the media content.  */
    url: z.string()
  })
});
const ToolRequestPartSchema = EmptyPartSchema.extend({
  /** A request for a tool to be executed, usually provided by a model. */
  toolRequest: z.object({
    /** The call id or reference for a specific request. */
    ref: z.string().optional(),
    /** The name of the tool to call. */
    name: z.string(),
    /** The input parameters for the tool, usually a JSON object. */
    input: z.unknown().optional()
  })
});
const ToolResponsePartSchema = EmptyPartSchema.extend({
  /** A provided response to a tool call. */
  toolResponse: z.object({
    /** The call id or reference for a specific request. */
    ref: z.string().optional(),
    /** The name of the tool. */
    name: z.string(),
    /** The output data returned from the tool, usually a JSON object. */
    output: z.unknown().optional()
  })
});
const DataPartSchema = EmptyPartSchema.extend({
  data: z.unknown()
});
const PartSchema = z.union([
  TextPartSchema,
  MediaPartSchema,
  ToolRequestPartSchema,
  ToolResponsePartSchema,
  DataPartSchema
]);
const RoleSchema = z.enum(["system", "user", "model", "tool"]);
const MessageSchema = z.object({
  role: RoleSchema,
  content: z.array(PartSchema)
});
const OutputFormatSchema = z.enum(["json", "text", "media"]);
const ModelInfoSchema = z.object({
  /** Acceptable names for this model (e.g. different versions). */
  versions: z.array(z.string()).optional(),
  /** Friendly label for this model (e.g. "Google AI - Gemini Pro") */
  label: z.string().optional(),
  /** Supported model capabilities. */
  supports: z.object({
    /** Model can process historical messages passed with a prompt. */
    multiturn: z.boolean().optional(),
    /** Model can process media as part of the prompt (multimodal input). */
    media: z.boolean().optional(),
    /** Model can perform tool calls. */
    tools: z.boolean().optional(),
    /** Model can accept messages with role "system". */
    systemRole: z.boolean().optional(),
    /** Model can output this type of data. */
    output: z.array(OutputFormatSchema).optional(),
    /** Model can natively support document-based context grounding. */
    context: z.boolean().optional()
  }).optional()
});
const ToolDefinitionSchema = z.object({
  name: z.string(),
  description: z.string(),
  inputSchema: z.record(z.any()).describe("Valid JSON Schema representing the input of the tool."),
  outputSchema: z.record(z.any()).describe("Valid JSON Schema describing the output of the tool.").optional()
});
const GenerationCommonConfigSchema = z.object({
  /** A specific version of a model family, e.g. `gemini-1.0-pro-001` for the `gemini-1.0-pro` family. */
  version: z.string().optional(),
  temperature: z.number().optional(),
  maxOutputTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  stopSequences: z.array(z.string()).optional()
});
const OutputConfigSchema = z.object({
  format: OutputFormatSchema.optional(),
  schema: z.record(z.any()).optional()
});
const GenerateRequestSchema = z.object({
  messages: z.array(MessageSchema),
  config: z.any().optional(),
  tools: z.array(ToolDefinitionSchema).optional(),
  output: OutputConfigSchema.optional(),
  context: z.array(DocumentDataSchema).optional(),
  candidates: z.number().optional()
});
const GenerationUsageSchema = z.object({
  inputTokens: z.number().optional(),
  outputTokens: z.number().optional(),
  totalTokens: z.number().optional(),
  inputCharacters: z.number().optional(),
  outputCharacters: z.number().optional(),
  inputImages: z.number().optional(),
  outputImages: z.number().optional(),
  custom: z.record(z.number()).optional()
});
const CandidateSchema = z.object({
  index: z.number(),
  message: MessageSchema,
  usage: GenerationUsageSchema.optional(),
  finishReason: z.enum(["stop", "length", "blocked", "other", "unknown"]),
  finishMessage: z.string().optional(),
  custom: z.unknown()
});
const CandidateErrorSchema = z.object({
  index: z.number(),
  code: z.enum(["blocked", "other", "unknown"]),
  message: z.string().optional()
});
const GenerateResponseSchema = z.object({
  candidates: z.array(CandidateSchema),
  latencyMs: z.number().optional(),
  usage: GenerationUsageSchema.optional(),
  custom: z.unknown(),
  request: GenerateRequestSchema.optional()
});
const GenerateResponseChunkSchema = z.object({
  /** The index of the candidate this chunk belongs to. */
  index: z.number(),
  /** The chunk of content to stream right now. */
  content: z.array(PartSchema),
  /** Model-specific extra information attached to this chunk. */
  custom: z.unknown().optional()
});
function defineModel(options, runner) {
  var _a;
  const label = options.label || `${options.name} GenAI model`;
  const middleware = [
    ...options.use || [],
    validateSupport(options)
  ];
  if (!((_a = options == null ? void 0 : options.supports) == null ? void 0 : _a.context))
    middleware.push(augmentWithContext());
  middleware.push(conformOutput());
  const act = defineAction(
    {
      actionType: "model",
      name: options.name,
      description: label,
      inputSchema: GenerateRequestSchema,
      outputSchema: GenerateResponseSchema,
      metadata: {
        model: {
          label,
          customOptions: options.configSchema ? toJsonSchema({ schema: options.configSchema }) : void 0,
          versions: options.versions,
          supports: options.supports
        }
      },
      use: middleware
    },
    (input) => {
      const startTimeMs = performance.now();
      return runner(input, getStreamingCallback()).then((response) => {
        const timedResponse = __spreadProps(__spreadValues({}, response), {
          latencyMs: performance.now() - startTimeMs
        });
        telemetry.recordGenerateActionMetrics(options.name, input, {
          response: timedResponse
        });
        return timedResponse;
      }).catch((err) => {
        telemetry.recordGenerateActionMetrics(options.name, input, { err });
        throw err;
      });
    }
  );
  Object.assign(act, {
    __configSchema: options.configSchema || z.unknown()
  });
  return act;
}
function modelRef(options) {
  return __spreadValues({}, options);
}
function getBasicUsageStats(input, candidates) {
  const responseCandidateParts = candidates.flatMap(
    (candidate) => candidate.message.content
  );
  const inputCounts = getPartCounts(input.flatMap((md) => md.content));
  const outputCounts = getPartCounts(
    candidates.flatMap((c) => c.message.content)
  );
  return {
    inputCharacters: inputCounts.characters,
    inputImages: inputCounts.images,
    outputCharacters: outputCounts.characters,
    outputImages: outputCounts.images
  };
}
function getPartCounts(parts) {
  return parts.reduce(
    (counts, part) => {
      var _a;
      return {
        characters: counts.characters + (((_a = part.text) == null ? void 0 : _a.length) || 0),
        images: counts.images + (part.media ? 1 : 0)
      };
    },
    { characters: 0, images: 0 }
  );
}
export {
  CandidateErrorSchema,
  CandidateSchema,
  DataPartSchema,
  GenerateRequestSchema,
  GenerateResponseChunkSchema,
  GenerateResponseSchema,
  GenerationCommonConfigSchema,
  GenerationUsageSchema,
  MediaPartSchema,
  MessageSchema,
  ModelInfoSchema,
  PartSchema,
  RoleSchema,
  TextPartSchema,
  ToolDefinitionSchema,
  ToolRequestPartSchema,
  ToolResponsePartSchema,
  defineModel,
  getBasicUsageStats,
  modelRef
};
//# sourceMappingURL=model.mjs.map