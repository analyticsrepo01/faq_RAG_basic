{"version":3,"sources":["../src/document.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport z from 'zod';\n\nconst EmptyPartSchema = z.object({\n  text: z.never().optional(),\n  media: z.never().optional(),\n});\n\nexport const TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the document. */\n  text: z.string(),\n});\nexport type TextPart = z.infer<typeof TextPartSchema>;\n\nexport const MediaPartSchema = EmptyPartSchema.extend({\n  media: z.object({\n    /** The media content type. Inferred from data uri if not provided. */\n    contentType: z.string().optional(),\n    /** A `data:` or `https:` uri containing the media content.  */\n    url: z.string(),\n  }),\n});\nexport type MediaPart = z.infer<typeof MediaPartSchema>;\n\nexport const PartSchema = z.union([TextPartSchema, MediaPartSchema]);\nexport type Part = z.infer<typeof PartSchema>;\n\nexport const DocumentDataSchema = z.object({\n  content: z.array(PartSchema),\n  metadata: z.record(z.string(), z.any()).optional(),\n});\nexport type DocumentData = z.infer<typeof DocumentDataSchema>;\n\n/**\n * Document represents document content along with its metadata that can be embedded, indexed or\n * retrieved. Each document can contain multiple parts (for example text and an image)\n */\nexport class Document implements DocumentData {\n  content: Part[];\n  metadata?: Record<string, any>;\n\n  constructor(data: DocumentData) {\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n\n  static fromText(text: string, metadata?: Record<string, any>) {\n    return new Document({\n      content: [{ text }],\n      metadata,\n    });\n  }\n\n  /**\n   * Concatenates all `text` parts present in the document with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  text(): string {\n    return this.content.map((part) => part.text || '').join('');\n  }\n\n  /**\n   * Returns the first media part detected in the document. Useful for extracting\n   * (for example) an image.\n   * @returns The first detected `media` part in the document.\n   */\n  media(): { url: string; contentType?: string } | null {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n\n  toJSON(): DocumentData {\n    return {\n      content: this.content,\n      metadata: this.metadata,\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,iBAAc;AAEd,MAAM,kBAAkB,WAAAA,QAAE,OAAO;AAAA,EAC/B,MAAM,WAAAA,QAAE,MAAM,EAAE,SAAS;AAAA,EACzB,OAAO,WAAAA,QAAE,MAAM,EAAE,SAAS;AAC5B,CAAC;AAEM,MAAM,iBAAiB,gBAAgB,OAAO;AAAA;AAAA,EAEnD,MAAM,WAAAA,QAAE,OAAO;AACjB,CAAC;AAGM,MAAM,kBAAkB,gBAAgB,OAAO;AAAA,EACpD,OAAO,WAAAA,QAAE,OAAO;AAAA;AAAA,IAEd,aAAa,WAAAA,QAAE,OAAO,EAAE,SAAS;AAAA;AAAA,IAEjC,KAAK,WAAAA,QAAE,OAAO;AAAA,EAChB,CAAC;AACH,CAAC;AAGM,MAAM,aAAa,WAAAA,QAAE,MAAM,CAAC,gBAAgB,eAAe,CAAC;AAG5D,MAAM,qBAAqB,WAAAA,QAAE,OAAO;AAAA,EACzC,SAAS,WAAAA,QAAE,MAAM,UAAU;AAAA,EAC3B,UAAU,WAAAA,QAAE,OAAO,WAAAA,QAAE,OAAO,GAAG,WAAAA,QAAE,IAAI,CAAC,EAAE,SAAS;AACnD,CAAC;AAOM,MAAM,SAAiC;AAAA,EAI5C,YAAY,MAAoB;AAC9B,SAAK,UAAU,KAAK;AACpB,SAAK,WAAW,KAAK;AAAA,EACvB;AAAA,EAEA,OAAO,SAAS,MAAc,UAAgC;AAC5D,WAAO,IAAI,SAAS;AAAA,MAClB,SAAS,CAAC,EAAE,KAAK,CAAC;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAe;AACb,WAAO,KAAK,QAAQ,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE,EAAE,KAAK,EAAE;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAsD;AAjFxD;AAkFI,aAAO,UAAK,QAAQ,KAAK,CAAC,SAAS,KAAK,KAAK,MAAtC,mBAAyC,UAAS;AAAA,EAC3D;AAAA,EAEA,SAAuB;AACrB,WAAO;AAAA,MACL,SAAS,KAAK;AAAA,MACd,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AACF;","names":["z"]}