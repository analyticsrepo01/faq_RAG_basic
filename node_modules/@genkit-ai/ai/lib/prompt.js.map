{"version":3,"sources":["../src/prompt.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action, defineAction, JSONSchema7 } from '@genkit-ai/core';\nimport { lookupAction } from '@genkit-ai/core/registry';\nimport z from 'zod';\nimport { DocumentData } from './document.js';\nimport { GenerateOptions } from './generate.js';\nimport {\n  GenerateRequest,\n  GenerateRequestSchema,\n  ModelArgument,\n} from './model.js';\n\nexport type PromptFn<I extends z.ZodTypeAny = z.ZodTypeAny> = (\n  input: z.infer<I>\n) => Promise<GenerateRequest>;\n\nexport type PromptAction<I extends z.ZodTypeAny = z.ZodTypeAny> = Action<\n  I,\n  typeof GenerateRequestSchema\n> & {\n  __action: {\n    metadata: {\n      type: 'prompt';\n    };\n  };\n};\n\nexport function isPrompt(arg: any): boolean {\n  return (\n    typeof arg === 'function' &&\n    (arg as any).__action?.metadata?.type === 'prompt'\n  );\n}\n\nexport function definePrompt<I extends z.ZodTypeAny>(\n  {\n    name,\n    description,\n    inputSchema,\n    inputJsonSchema,\n    metadata,\n  }: {\n    name: string;\n    description?: string;\n    inputSchema?: I;\n    inputJsonSchema?: JSONSchema7;\n    metadata?: Record<string, any>;\n  },\n  fn: PromptFn<I>\n): PromptAction<I> {\n  const a = defineAction(\n    {\n      actionType: 'prompt',\n      name,\n      description,\n      inputSchema,\n      inputJsonSchema,\n      metadata: { ...(metadata || { prompt: {} }), type: 'prompt' },\n    },\n    fn\n  );\n  return a as PromptAction<I>;\n}\n\n/**\n * A veneer for rendering a prompt action to GenerateOptions.\n */\n\nexport type PromptArgument<I extends z.ZodTypeAny = z.ZodTypeAny> =\n  | string\n  | PromptAction<I>;\n\nexport async function renderPrompt<\n  I extends z.ZodTypeAny = z.ZodTypeAny,\n  CustomOptions extends z.ZodTypeAny = z.ZodTypeAny,\n>(params: {\n  prompt: PromptArgument<I>;\n  input: z.infer<I>;\n  context?: DocumentData[];\n  model: ModelArgument<CustomOptions>;\n  config?: z.infer<CustomOptions>;\n}): Promise<GenerateOptions> {\n  let prompt: PromptAction<I>;\n  if (typeof params.prompt === 'string') {\n    prompt = await lookupAction(`/prompt/${params.prompt}`);\n  } else {\n    prompt = params.prompt as PromptAction<I>;\n  }\n  const rendered = await prompt(params.input);\n  return {\n    model: params.model,\n    config: { ...(rendered.config || {}), ...params.config },\n    history: rendered.messages.slice(0, rendered.messages.length - 1),\n    prompt: rendered.messages[rendered.messages.length - 1].content,\n    context: params.context,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAkD;AAClD,sBAA6B;AAyBtB,SAAS,SAAS,KAAmB;AA1C5C;AA2CE,SACE,OAAO,QAAQ,gBACd,eAAY,aAAZ,mBAAsB,aAAtB,mBAAgC,UAAS;AAE9C;AAEO,SAAS,aACd;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAOA,IACiB;AACjB,QAAM,QAAI;AAAA,IACR;AAAA,MACE,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,UAAU,iCAAM,YAAY,EAAE,QAAQ,CAAC,EAAE,IAA/B,EAAmC,MAAM,SAAS;AAAA,IAC9D;AAAA,IACA;AAAA,EACF;AACA,SAAO;AACT;AAUA,SAAsB,aAGpB,QAM2B;AAAA;AAC3B,QAAI;AACJ,QAAI,OAAO,OAAO,WAAW,UAAU;AACrC,eAAS,UAAM,8BAAa,WAAW,OAAO,MAAM,EAAE;AAAA,IACxD,OAAO;AACL,eAAS,OAAO;AAAA,IAClB;AACA,UAAM,WAAW,MAAM,OAAO,OAAO,KAAK;AAC1C,WAAO;AAAA,MACL,OAAO,OAAO;AAAA,MACd,QAAQ,kCAAM,SAAS,UAAU,CAAC,IAAO,OAAO;AAAA,MAChD,SAAS,SAAS,SAAS,MAAM,GAAG,SAAS,SAAS,SAAS,CAAC;AAAA,MAChE,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,CAAC,EAAE;AAAA,MACxD,SAAS,OAAO;AAAA,IAClB;AAAA,EACF;AAAA;","names":[]}