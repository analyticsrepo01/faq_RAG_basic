"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var extract_exports = {};
__export(extract_exports, {
  extractJson: () => extractJson
});
module.exports = __toCommonJS(extract_exports);
var import_json5 = __toESM(require("json5"));
function extractJson(text) {
  let openingChar;
  let closingChar;
  let startPos;
  let nestingCount = 0;
  for (let i = 0; i < text.length; i++) {
    const char = text[i].replace(/\u00A0/g, " ");
    if (!openingChar && (char === "{" || char === "[")) {
      openingChar = char;
      closingChar = char === "{" ? "}" : "]";
      startPos = i;
      nestingCount++;
    } else if (char === openingChar) {
      nestingCount++;
    } else if (char === closingChar) {
      nestingCount--;
      if (!nestingCount) {
        return import_json5.default.parse(text.substring(startPos || 0, i + 1));
      }
    }
  }
  if (startPos !== void 0 && nestingCount > 0) {
    try {
      return import_json5.default.parse(text.substring(startPos) + (closingChar || ""));
    } catch (e) {
      throw new Error(`Invalid JSON extracted from model output: ${text}`);
    }
  }
  throw new Error(`No JSON object or array found in model output: ${text}`);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extractJson
});
//# sourceMappingURL=extract.js.map