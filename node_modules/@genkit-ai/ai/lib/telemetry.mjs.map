{"version":3,"sources":["../src/telemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GENKIT_VERSION } from '@genkit-ai/core';\nimport { logger } from '@genkit-ai/core/logging';\nimport {\n  internalMetricNamespaceWrap,\n  MetricCounter,\n  MetricHistogram,\n} from '@genkit-ai/core/metrics';\nimport { spanMetadataAls } from '@genkit-ai/core/tracing';\nimport { ValueType } from '@opentelemetry/api';\nimport { createHash } from 'crypto';\nimport { GenerateOptions } from './generate.js';\nimport {\n  GenerateRequest,\n  GenerateResponseData,\n  MediaPart,\n  Part,\n  ToolRequestPart,\n  ToolResponsePart,\n} from './model.js';\n\n/** The maximum length (in characters) of a logged prompt message. */\nconst MAX_LOG_CONTENT_CHARS = 128_000;\n\n/**\n * Wraps the declared metrics in a Genkit-specific, internal namespace.\n */\nconst _N = internalMetricNamespaceWrap.bind(null, 'ai');\n\nconst generateActionCounter = new MetricCounter(_N('generate/requests'), {\n  description: 'Counts calls to genkit generate actions.',\n  valueType: ValueType.INT,\n});\n\nconst generateActionLatencies = new MetricHistogram(_N('generate/latency'), {\n  description: 'Latencies when interacting with a Genkit model.',\n  valueType: ValueType.DOUBLE,\n  unit: 'ms',\n});\n\nconst generateActionInputCharacters = new MetricCounter(\n  _N('generate/input/characters'),\n  {\n    description: 'Counts input characters to any Genkit model.',\n    valueType: ValueType.INT,\n  }\n);\n\nconst generateActionInputTokens = new MetricCounter(\n  _N('generate/input/tokens'),\n  {\n    description: 'Counts input tokens to a Genkit model.',\n    valueType: ValueType.INT,\n  }\n);\n\nconst generateActionInputImages = new MetricCounter(\n  _N('generate/input/images'),\n  {\n    description: 'Counts input images to a Genkit model.',\n    valueType: ValueType.INT,\n  }\n);\n\nconst generateActionOutputCharacters = new MetricCounter(\n  _N('generate/output/characters'),\n  {\n    description: 'Counts output characters from a Genkit model.',\n    valueType: ValueType.INT,\n  }\n);\n\nconst generateActionOutputTokens = new MetricCounter(\n  _N('generate/output/tokens'),\n  {\n    description: 'Counts output tokens from a Genkit model.',\n    valueType: ValueType.INT,\n  }\n);\n\nconst generateActionOutputImages = new MetricCounter(\n  _N('generate/output/images'),\n  {\n    description: 'Count output images from a Genkit model.',\n    valueType: ValueType.INT,\n  }\n);\n\ntype SharedDimensions = {\n  modelName?: string;\n  path?: string;\n  temperature?: number;\n  topK?: number;\n  topP?: number;\n  source?: string;\n  sourceVersion?: string;\n};\n\nexport function recordGenerateActionMetrics(\n  modelName: string,\n  input: GenerateRequest,\n  opts: {\n    response?: GenerateResponseData;\n    err?: any;\n  }\n) {\n  doRecordGenerateActionMetrics(modelName, {\n    temperature: input.config?.temperature,\n    topK: input.config?.topK,\n    topP: input.config?.topP,\n    maxOutputTokens: input.config?.maxOutputTokens,\n    path: spanMetadataAls?.getStore()?.path,\n    inputTokens: opts.response?.usage?.inputTokens,\n    outputTokens: opts.response?.usage?.outputTokens,\n    totalTokens: opts.response?.usage?.totalTokens,\n    inputCharacters: opts.response?.usage?.inputCharacters,\n    outputCharacters: opts.response?.usage?.outputCharacters,\n    inputImages: opts.response?.usage?.inputImages,\n    outputImages: opts.response?.usage?.outputImages,\n    latencyMs: opts.response?.latencyMs,\n    err: opts.err,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n}\n\nexport function recordGenerateActionInputLogs(\n  model: string,\n  options: GenerateOptions,\n  input: GenerateRequest\n) {\n  const path = spanMetadataAls?.getStore()?.path;\n  const sharedMetadata = { model, path };\n  logger.logStructured(`Config[${path}, ${model}]`, {\n    ...sharedMetadata,\n    temperature: options.config?.temperature,\n    topK: options.config?.topK,\n    topP: options.config?.topP,\n    maxOutputTokens: options.config?.maxOutputTokens,\n    stopSequences: options.config?.stopSequences,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n\n  const messages = input.messages.length;\n  input.messages.forEach((msg, msgIdx) => {\n    const parts = msg.content.length;\n    msg.content.forEach((part, partIdx) => {\n      const partCounts = toPartCounts(partIdx, parts, msgIdx, messages);\n      logger.logStructured(`Input[${path}, ${model}] ${partCounts}`, {\n        ...sharedMetadata,\n        content: toPartLogContent(part),\n        partIndex: partIdx,\n        totalParts: parts,\n        messageIndex: msgIdx,\n        totalMessages: messages,\n      });\n    });\n  });\n}\n\nexport function recordGenerateActionOutputLogs(\n  model: string,\n  options: GenerateOptions,\n  output: GenerateResponseData\n) {\n  const path = spanMetadataAls?.getStore()?.path;\n  const sharedMetadata = { model, path };\n  const candidates = output.candidates.length;\n  output.candidates.forEach((cand, candIdx) => {\n    const parts = cand.message.content.length;\n    cand.message.content.forEach((part, partIdx) => {\n      const partCounts = toPartCounts(partIdx, parts, candIdx, candidates);\n      const initial = cand.finishMessage\n        ? { finishMessage: toPartLogText(cand.finishMessage) }\n        : {};\n      logger.logStructured(`Output[${path}, ${model}] ${partCounts}`, {\n        ...initial,\n        ...sharedMetadata,\n        content: toPartLogContent(part),\n        partIndex: partIdx,\n        totalParts: parts,\n        candidateIndex: candIdx,\n        totalCandidates: candidates,\n        messageIndex: cand.index,\n        finishReason: cand.finishReason,\n      });\n    });\n  });\n}\n\nfunction toPartCounts(\n  partOrdinal: number,\n  parts: number,\n  msgOrdinal: number,\n  messages: number\n): string {\n  if (parts > 1 && messages > 1) {\n    return `(part ${xOfY(partOrdinal, parts)} in message ${xOfY(\n      msgOrdinal,\n      messages\n    )})`;\n  }\n  if (parts > 1) {\n    return `(part ${xOfY(partOrdinal, parts)})`;\n  }\n  if (messages > 1) {\n    return `(message ${xOfY(msgOrdinal, messages)})`;\n  }\n  return '';\n}\n\nfunction xOfY(x: number, y: number): string {\n  return `${x} of ${y}`;\n}\n\nfunction toPartLogContent(part: Part): string {\n  if (part.text) {\n    return toPartLogText(part.text);\n  }\n  if (part.media) {\n    return toPartLogMedia(part);\n  }\n  if (part.toolRequest) {\n    return toPartLogToolRequest(part);\n  }\n  if (part.toolResponse) {\n    return toPartLogToolResponse(part);\n  }\n  return '<unknown format>';\n}\n\nfunction toPartLogText(text: string): string {\n  return text.substring(0, MAX_LOG_CONTENT_CHARS);\n}\n\nfunction toPartLogMedia(part: MediaPart): string {\n  if (part.media.url.startsWith('data:')) {\n    const splitIdx = part.media.url.indexOf('base64,');\n    if (splitIdx < 0) {\n      return '<unknown media format>';\n    }\n    const prefix = part.media.url.substring(0, splitIdx + 7);\n    const hashedContent = createHash('sha256')\n      .update(part.media.url.substring(splitIdx + 7))\n      .digest('hex');\n    return `${prefix}<sha256(${hashedContent})>`;\n  }\n  return toPartLogText(part.media.url);\n}\n\nfunction toPartLogToolRequest(part: ToolRequestPart): string {\n  const inputText =\n    typeof part.toolRequest.input === 'string'\n      ? part.toolRequest.input\n      : JSON.stringify(part.toolRequest.input);\n  return toPartLogText(\n    `Tool request: ${part.toolRequest.name}, ref: ${part.toolRequest.ref}, input: ${inputText}`\n  );\n}\n\nfunction toPartLogToolResponse(part: ToolResponsePart): string {\n  const outputText =\n    typeof part.toolResponse.output === 'string'\n      ? part.toolResponse.output\n      : JSON.stringify(part.toolResponse.output);\n  return toPartLogText(\n    `Tool response: ${part.toolResponse.name}, ref: ${part.toolResponse.ref}, output: ${outputText}`\n  );\n}\n\n/**\n *\n * Records all metrics associated with performing a GenerateAction.\n */\nfunction doRecordGenerateActionMetrics(\n  modelName: string,\n  dimensions: {\n    path?: string;\n    temperature?: number;\n    maxOutputTokens?: number;\n    topK?: number;\n    topP?: number;\n    inputTokens?: number;\n    outputTokens?: number;\n    totalTokens?: number;\n    inputCharacters?: number;\n    outputCharacters?: number;\n    totalCharacters?: number;\n    inputImages?: number;\n    outputImages?: number;\n    latencyMs?: number;\n    err?: any;\n    source?: string;\n    sourceVersion: string;\n  }\n) {\n  const shared: SharedDimensions = {\n    modelName: modelName,\n    path: dimensions.path,\n    temperature: dimensions.temperature,\n    topK: dimensions.topK,\n    topP: dimensions.topP,\n    source: dimensions.source,\n    sourceVersion: dimensions.sourceVersion,\n  };\n\n  generateActionCounter.add(1, {\n    maxOutputTokens: dimensions.maxOutputTokens,\n    errorCode: dimensions.err?.code,\n    errorMessage: dimensions.err?.message,\n    ...shared,\n  });\n\n  generateActionLatencies.record(dimensions.latencyMs, shared);\n\n  // inputs\n  generateActionInputTokens.add(dimensions.inputTokens, shared);\n  generateActionInputCharacters.add(dimensions.inputCharacters, shared);\n  generateActionInputImages.add(dimensions.inputImages, shared);\n\n  // outputs\n  generateActionOutputTokens.add(dimensions.outputTokens, shared);\n  generateActionOutputCharacters.add(dimensions.outputCharacters, shared);\n  generateActionOutputImages.add(dimensions.outputImages, shared);\n}\n"],"mappings":"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","names":[]}