"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var telemetry_exports = {};
__export(telemetry_exports, {
  logRequest: () => logRequest,
  logResponse: () => logResponse,
  recordError: () => recordError,
  writeFlowFailure: () => writeFlowFailure,
  writeFlowSuccess: () => writeFlowSuccess
});
module.exports = __toCommonJS(telemetry_exports);
var import_core = require("@genkit-ai/core");
var import_logging = require("@genkit-ai/core/logging");
var import_metrics = require("@genkit-ai/core/metrics");
var import_tracing = require("@genkit-ai/core/tracing");
var import_api = require("@opentelemetry/api");
const _N = import_metrics.internalMetricNamespaceWrap.bind(null, "flow");
const flowCounter = new import_metrics.MetricCounter(_N("requests"), {
  description: "Counts calls to genkit flows.",
  valueType: import_api.ValueType.INT
});
const flowLatencies = new import_metrics.MetricHistogram(_N("latency"), {
  description: "Latencies when calling Genkit flows.",
  valueType: import_api.ValueType.DOUBLE,
  unit: "ms"
});
function recordError(err) {
  var _a, _b;
  const path = (_b = (_a = import_tracing.spanMetadataAls) == null ? void 0 : _a.getStore()) == null ? void 0 : _b.path;
  import_logging.logger.logStructuredError(`Error[${path}, ${err.name}]`, {
    path,
    name: err.name,
    message: err.message,
    stack: err.stack,
    source: "ts",
    sourceVersion: import_core.GENKIT_VERSION
  });
}
function writeFlowSuccess(flowName, latencyMs) {
  const dimensions = {
    name: flowName,
    source: "ts",
    sourceVersion: import_core.GENKIT_VERSION
  };
  flowCounter.add(1, dimensions);
  flowLatencies.record(latencyMs, dimensions);
}
function writeFlowFailure(flowName, latencyMs, err) {
  const dimensions = {
    name: flowName,
    errorCode: err == null ? void 0 : err.code,
    errorMessage: err == null ? void 0 : err.message,
    source: "ts",
    sourceVersion: import_core.GENKIT_VERSION
  };
  flowCounter.add(1, dimensions);
  flowLatencies.record(latencyMs, dimensions);
}
function logRequest(flowName, req) {
  import_logging.logger.logStructured(`Request[/${flowName}]`, {
    flowName,
    headers: __spreadProps(__spreadValues({}, req.headers), {
      authorization: "<redacted>"
    }),
    params: req.params,
    body: req.body,
    query: req.query,
    originalUrl: req.originalUrl,
    path: `/${flowName}`,
    source: "ts",
    sourceVersion: import_core.GENKIT_VERSION
  });
}
function logResponse(flowName, respCode, respBody) {
  import_logging.logger.logStructured(`Response[/${flowName}]`, {
    flowName,
    path: `/${flowName}`,
    code: respCode,
    body: respBody,
    source: "ts",
    sourceVersion: import_core.GENKIT_VERSION
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  logRequest,
  logResponse,
  recordError,
  writeFlowFailure,
  writeFlowSuccess
});
//# sourceMappingURL=telemetry.js.map