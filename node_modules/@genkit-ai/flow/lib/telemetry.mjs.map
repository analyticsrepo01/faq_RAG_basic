{"version":3,"sources":["../src/telemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GENKIT_VERSION } from '@genkit-ai/core';\nimport { logger } from '@genkit-ai/core/logging';\nimport {\n  internalMetricNamespaceWrap,\n  MetricCounter,\n  MetricHistogram,\n} from '@genkit-ai/core/metrics';\nimport { spanMetadataAls } from '@genkit-ai/core/tracing';\nimport { ValueType } from '@opentelemetry/api';\nimport express from 'express';\n\n/**\n * Wraps the declared metrics in a Genkit-specific, internal namespace.\n */\nconst _N = internalMetricNamespaceWrap.bind(null, 'flow');\n\nconst flowCounter = new MetricCounter(_N('requests'), {\n  description: 'Counts calls to genkit flows.',\n  valueType: ValueType.INT,\n});\n\nconst flowLatencies = new MetricHistogram(_N('latency'), {\n  description: 'Latencies when calling Genkit flows.',\n  valueType: ValueType.DOUBLE,\n  unit: 'ms',\n});\n\nexport function recordError(err: any) {\n  const path = spanMetadataAls?.getStore()?.path;\n  logger.logStructuredError(`Error[${path}, ${err.name}]`, {\n    path: path,\n    name: err.name,\n    message: err.message,\n    stack: err.stack,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n}\n\nexport function writeFlowSuccess(flowName: string, latencyMs: number) {\n  const dimensions = {\n    name: flowName,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  };\n  flowCounter.add(1, dimensions);\n  flowLatencies.record(latencyMs, dimensions);\n}\n\nexport function writeFlowFailure(\n  flowName: string,\n  latencyMs: number,\n  err: any\n) {\n  const dimensions = {\n    name: flowName,\n    errorCode: err?.code,\n    errorMessage: err?.message,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  };\n  flowCounter.add(1, dimensions);\n  flowLatencies.record(latencyMs, dimensions);\n}\n\nexport function logRequest(flowName: string, req: express.Request) {\n  logger.logStructured(`Request[/${flowName}]`, {\n    flowName: flowName,\n    headers: {\n      ...req.headers,\n      authorization: '<redacted>',\n    },\n    params: req.params,\n    body: req.body,\n    query: req.query,\n    originalUrl: req.originalUrl,\n    path: `/${flowName}`,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n}\n\nexport function logResponse(flowName: string, respCode: number, respBody: any) {\n  logger.logStructured(`Response[/${flowName}]`, {\n    flowName: flowName,\n    path: `/${flowName}`,\n    code: respCode,\n    body: respBody,\n    source: 'ts',\n    sourceVersion: GENKIT_VERSION,\n  });\n}\n"],"mappings":";;;;AAgBA,SAAS,sBAAsB;AAC/B,SAAS,cAAc;AACvB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAM1B,MAAM,KAAK,4BAA4B,KAAK,MAAM,MAAM;AAExD,MAAM,cAAc,IAAI,cAAc,GAAG,UAAU,GAAG;AAAA,EACpD,aAAa;AAAA,EACb,WAAW,UAAU;AACvB,CAAC;AAED,MAAM,gBAAgB,IAAI,gBAAgB,GAAG,SAAS,GAAG;AAAA,EACvD,aAAa;AAAA,EACb,WAAW,UAAU;AAAA,EACrB,MAAM;AACR,CAAC;AAEM,SAAS,YAAY,KAAU;AA3CtC;AA4CE,QAAM,QAAO,kDAAiB,eAAjB,mBAA6B;AAC1C,SAAO,mBAAmB,SAAS,IAAI,KAAK,IAAI,IAAI,KAAK;AAAA,IACvD;AAAA,IACA,MAAM,IAAI;AAAA,IACV,SAAS,IAAI;AAAA,IACb,OAAO,IAAI;AAAA,IACX,QAAQ;AAAA,IACR,eAAe;AAAA,EACjB,CAAC;AACH;AAEO,SAAS,iBAAiB,UAAkB,WAAmB;AACpE,QAAM,aAAa;AAAA,IACjB,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,eAAe;AAAA,EACjB;AACA,cAAY,IAAI,GAAG,UAAU;AAC7B,gBAAc,OAAO,WAAW,UAAU;AAC5C;AAEO,SAAS,iBACd,UACA,WACA,KACA;AACA,QAAM,aAAa;AAAA,IACjB,MAAM;AAAA,IACN,WAAW,2BAAK;AAAA,IAChB,cAAc,2BAAK;AAAA,IACnB,QAAQ;AAAA,IACR,eAAe;AAAA,EACjB;AACA,cAAY,IAAI,GAAG,UAAU;AAC7B,gBAAc,OAAO,WAAW,UAAU;AAC5C;AAEO,SAAS,WAAW,UAAkB,KAAsB;AACjE,SAAO,cAAc,YAAY,QAAQ,KAAK;AAAA,IAC5C;AAAA,IACA,SAAS,iCACJ,IAAI,UADA;AAAA,MAEP,eAAe;AAAA,IACjB;AAAA,IACA,QAAQ,IAAI;AAAA,IACZ,MAAM,IAAI;AAAA,IACV,OAAO,IAAI;AAAA,IACX,aAAa,IAAI;AAAA,IACjB,MAAM,IAAI,QAAQ;AAAA,IAClB,QAAQ;AAAA,IACR,eAAe;AAAA,EACjB,CAAC;AACH;AAEO,SAAS,YAAY,UAAkB,UAAkB,UAAe;AAC7E,SAAO,cAAc,aAAa,QAAQ,KAAK;AAAA,IAC7C;AAAA,IACA,MAAM,IAAI,QAAQ;AAAA,IAClB,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,eAAe;AAAA,EACjB,CAAC;AACH;","names":[]}