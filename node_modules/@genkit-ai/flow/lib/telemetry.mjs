import {
  __spreadProps,
  __spreadValues
} from "./chunk-7OAPEGJQ.mjs";
import { GENKIT_VERSION } from "@genkit-ai/core";
import { logger } from "@genkit-ai/core/logging";
import {
  internalMetricNamespaceWrap,
  MetricCounter,
  MetricHistogram
} from "@genkit-ai/core/metrics";
import { spanMetadataAls } from "@genkit-ai/core/tracing";
import { ValueType } from "@opentelemetry/api";
const _N = internalMetricNamespaceWrap.bind(null, "flow");
const flowCounter = new MetricCounter(_N("requests"), {
  description: "Counts calls to genkit flows.",
  valueType: ValueType.INT
});
const flowLatencies = new MetricHistogram(_N("latency"), {
  description: "Latencies when calling Genkit flows.",
  valueType: ValueType.DOUBLE,
  unit: "ms"
});
function recordError(err) {
  var _a, _b;
  const path = (_b = (_a = spanMetadataAls) == null ? void 0 : _a.getStore()) == null ? void 0 : _b.path;
  logger.logStructuredError(`Error[${path}, ${err.name}]`, {
    path,
    name: err.name,
    message: err.message,
    stack: err.stack,
    source: "ts",
    sourceVersion: GENKIT_VERSION
  });
}
function writeFlowSuccess(flowName, latencyMs) {
  const dimensions = {
    name: flowName,
    source: "ts",
    sourceVersion: GENKIT_VERSION
  };
  flowCounter.add(1, dimensions);
  flowLatencies.record(latencyMs, dimensions);
}
function writeFlowFailure(flowName, latencyMs, err) {
  const dimensions = {
    name: flowName,
    errorCode: err == null ? void 0 : err.code,
    errorMessage: err == null ? void 0 : err.message,
    source: "ts",
    sourceVersion: GENKIT_VERSION
  };
  flowCounter.add(1, dimensions);
  flowLatencies.record(latencyMs, dimensions);
}
function logRequest(flowName, req) {
  logger.logStructured(`Request[/${flowName}]`, {
    flowName,
    headers: __spreadProps(__spreadValues({}, req.headers), {
      authorization: "<redacted>"
    }),
    params: req.params,
    body: req.body,
    query: req.query,
    originalUrl: req.originalUrl,
    path: `/${flowName}`,
    source: "ts",
    sourceVersion: GENKIT_VERSION
  });
}
function logResponse(flowName, respCode, respBody) {
  logger.logStructured(`Response[/${flowName}]`, {
    flowName,
    path: `/${flowName}`,
    code: respCode,
    body: respBody,
    source: "ts",
    sourceVersion: GENKIT_VERSION
  });
}
export {
  logRequest,
  logResponse,
  recordError,
  writeFlowFailure,
  writeFlowSuccess
};
//# sourceMappingURL=telemetry.mjs.map